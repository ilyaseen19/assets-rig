[{"C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\index.js":"1","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\reportWebVitals.js":"2","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\App.js":"3","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\main.js":"4","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\sales.js":"5","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\users.js":"6","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\dishes.js":"7","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\auth\\login.js":"8","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\component\\header.js":"9","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\component\\modals.js":"10","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\component\\print.js":"11","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\component\\tables.js":"12","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\index.js":"13","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\App.js":"14","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\reportWebVitals.js":"15","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\main.js":"16","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\auth\\login.js":"17","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\loaders\\loading.js":"18","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\notifications.js":"19","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\loaders\\elipses.js":"20","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\data\\data.js":"21","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\dashboard\\index.js":"22","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\aside.js":"23","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\assets\\index.js":"24","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\reports\\index.js":"25","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\settings\\index.js":"26","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\inventory\\index.js":"27","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\users.js":"28","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\addAsset.js":"29","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\assetDetails.js":"30","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\reportDetails.js":"31","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\invDetails.js":"32","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\addUser.js":"33","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\details.js":"34","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\createReport.js":"35","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\pageTitle.js":"36","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\chart.js":"37","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\itemCard.js":"38","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\index.js":"39","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\loaders\\round.js":"40","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\deps\\index.js":"41","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\departDetails.js":"42","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\print.js":"43","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\prints\\allAssets.js":"44","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\tables\\table.js":"45","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\tables\\printTables.js":"46","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\prints\\printQrCode.js":"47","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\prints\\printAsset.js":"48","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\prints\\invDetailsPrint.js":"49","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\prints\\printDepDetails.js":"50","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\prints\\printReport.js":"51","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\help\\index.js":"52","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\faq\\index.js":"53"},{"size":521,"mtime":1636207668627,"results":"54","hashOfConfig":"55"},{"size":375,"mtime":1636207668642,"results":"56","hashOfConfig":"55"},{"size":6337,"mtime":1637850834186,"results":"57","hashOfConfig":"55"},{"size":8426,"mtime":1637866417063,"results":"58","hashOfConfig":"55"},{"size":1213,"mtime":1636390075699,"results":"59","hashOfConfig":"55"},{"size":3744,"mtime":1636207668633,"results":"60","hashOfConfig":"55"},{"size":5453,"mtime":1636315038041,"results":"61","hashOfConfig":"55"},{"size":6536,"mtime":1637865888317,"results":"62","hashOfConfig":"55"},{"size":1934,"mtime":1637865670642,"results":"63","hashOfConfig":"55"},{"size":20600,"mtime":1636383034495,"results":"64","hashOfConfig":"55"},{"size":1614,"mtime":1637866757577,"results":"65","hashOfConfig":"55"},{"size":6172,"mtime":1636390237592,"results":"66","hashOfConfig":"55"},{"size":521,"mtime":1636207668627,"results":"67","hashOfConfig":"68"},{"size":11225,"mtime":1643168879532,"results":"69","hashOfConfig":"68"},{"size":375,"mtime":1636207668642,"results":"70","hashOfConfig":"68"},{"size":12892,"mtime":1643164387008,"results":"71","hashOfConfig":"68"},{"size":7528,"mtime":1643186922156,"results":"72","hashOfConfig":"68"},{"size":1625,"mtime":1643187738791,"results":"73","hashOfConfig":"68"},{"size":2689,"mtime":1642497252309,"results":"74","hashOfConfig":"68"},{"size":348,"mtime":1639701017611,"results":"75","hashOfConfig":"68"},{"size":862,"mtime":1642942964482,"results":"76","hashOfConfig":"68"},{"size":5991,"mtime":1642709393517,"results":"77","hashOfConfig":"68"},{"size":10142,"mtime":1642936986453,"results":"78","hashOfConfig":"68"},{"size":7355,"mtime":1642936248680,"results":"79","hashOfConfig":"68"},{"size":10652,"mtime":1643168670897,"results":"80","hashOfConfig":"68"},{"size":11569,"mtime":1642986320305,"results":"81","hashOfConfig":"68"},{"size":3907,"mtime":1643164616896,"results":"82","hashOfConfig":"68"},{"size":2986,"mtime":1642858017985,"results":"83","hashOfConfig":"68"},{"size":12411,"mtime":1643162841166,"results":"84","hashOfConfig":"68"},{"size":22932,"mtime":1643167602920,"results":"85","hashOfConfig":"68"},{"size":2018,"mtime":1641261704815,"results":"86","hashOfConfig":"68"},{"size":2444,"mtime":1642936957851,"results":"87","hashOfConfig":"68"},{"size":6461,"mtime":1642371319975,"results":"88","hashOfConfig":"68"},{"size":21669,"mtime":1642857976063,"results":"89","hashOfConfig":"68"},{"size":5146,"mtime":1642504277835,"results":"90","hashOfConfig":"68"},{"size":8165,"mtime":1642940519324,"results":"91","hashOfConfig":"68"},{"size":1147,"mtime":1643168541246,"results":"92","hashOfConfig":"68"},{"size":2939,"mtime":1642588536047,"results":"93","hashOfConfig":"68"},{"size":10560,"mtime":1643166179357,"results":"94","hashOfConfig":"68"},{"size":219,"mtime":1642335914393,"results":"95","hashOfConfig":"68"},{"size":2640,"mtime":1642594934931,"results":"96","hashOfConfig":"68"},{"size":10832,"mtime":1642936954357,"results":"97","hashOfConfig":"68"},{"size":212,"mtime":1642688316141,"results":"98","hashOfConfig":"68"},{"size":1828,"mtime":1642864826957,"results":"99","hashOfConfig":"68"},{"size":2028,"mtime":1642679355577,"results":"100","hashOfConfig":"68"},{"size":1459,"mtime":1642865810917,"results":"101","hashOfConfig":"68"},{"size":473,"mtime":1642682200510,"results":"102","hashOfConfig":"68"},{"size":2844,"mtime":1642693696139,"results":"103","hashOfConfig":"68"},{"size":3272,"mtime":1642685424452,"results":"104","hashOfConfig":"68"},{"size":8343,"mtime":1642687471364,"results":"105","hashOfConfig":"68"},{"size":5946,"mtime":1642688917967,"results":"106","hashOfConfig":"68"},{"size":3287,"mtime":1643188219995,"results":"107","hashOfConfig":"68"},{"size":2634,"mtime":1642936941125,"results":"108","hashOfConfig":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v189m",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"1gjpamy",{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"140"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"140"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"140"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"140"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"140"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"140"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"140"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"140"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"140"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"140"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},"C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\index.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\reportWebVitals.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\App.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\main.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\sales.js",["232","233","234","235","236"],"import { useState } from \"react\";\r\nimport \"./main.css\";\r\nimport Header from \"./component/header\";\r\nimport Tables from \"./component/tables\";\r\nimport Modals from \"./component/modals\";\r\n\r\nfunction Sales(props) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [title, setTitle] = useState(\"sales-modal\");\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const [row, setRow] = useState({});\r\n  const toggleDish = (check) => {\r\n    if (check === \"add-dish\") {\r\n      setTitle(check);\r\n      setIsOpen(!isOpen);\r\n    } else {\r\n      setTitle(check);\r\n      setIsOpen(!isOpen);\r\n    }\r\n  };\r\n  const _handleRowClick = (data) => {\r\n    setRow(data);\r\n    toggleDish(\"edit-dish\");\r\n  };\r\n  return (\r\n    <div>\r\n      <Header title=\"admin\" />\r\n      <div className=\"accounts\">\r\n        <div className=\"my-card\">\r\n          <div className=\"table-title\">Sales List</div>\r\n          <div>\r\n            <div className=\"my-card-body\">\r\n              <Tables\r\n                data={props.sales}\r\n                title=\"sales-table\"\r\n                onRowClicked={_handleRowClick}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sales;\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\users.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\dishes.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\auth\\login.js",["237","238","239","240","241","242"],"import React, { useState } from \"react\";\r\nimport \"./login.css\";\r\nimport logo from \"./kegali_white.jpg\";\r\n\r\n// importing db files\r\nconst { remote } = require(\"electron\");\r\nconst usersInstance = remote.getGlobal(\"userStore\");\r\n\r\nfunction Login(props) {\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loginType, setLoginType] = useState(false);\r\n  const [errMess, setErr] = useState(\"\");\r\n\r\n  const _handleLogin = () => {\r\n    if (userName === \"\" || password === \"\") {\r\n      setErr(\"Please both fileds are required!\");\r\n      setTimeout(() => {\r\n        setErr(\"\");\r\n      }, 3000);\r\n      return false;\r\n    } else if (password.length < 6) {\r\n      setErr(\"Please password is too short!\");\r\n      setTimeout(() => {\r\n        setErr(\"\");\r\n      }, 3000);\r\n      return false;\r\n    } else {\r\n      usersInstance.readUser(userName).then(user => {\r\n        if (user === null) {\r\n          setErr(\"User does not exist, please check user name or password!\");\r\n          setTimeout(() => {\r\n            setErr(\"\");\r\n          }, 3000);\r\n          return false;\r\n        } else {\r\n          localStorage.setItem(\"user\", JSON.stringify(user));\r\n          props.history.push(\"/main\");\r\n          setPassword(\"\");\r\n          setUserName(\"\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const _handleLoginAdmin = () => {\r\n    if (password === \"\") {\r\n      setErr(\"Password cannot be empty!\");\r\n      setTimeout(() => {\r\n        setErr(\"\");\r\n      }, 3000);\r\n      return false;\r\n    } else if (password.length < 6) {\r\n      setErr(\"Password is too short!\");\r\n      setTimeout(() => {\r\n        setErr(\"\");\r\n      }, 3000);\r\n      return false;\r\n    } else {\r\n      usersInstance.readAdmin(password).then(admin => {\r\n        if (admin === null) {\r\n          setErr(\"Admin does not exist, check password!\");\r\n          setTimeout(() => {\r\n            setErr(\"\");\r\n          }, 3000);\r\n          return false;\r\n        } else {\r\n          if (admin.role !== \"Admin\") {\r\n            setErr(\"You are not authorized to view this page!\");\r\n            setTimeout(() => {\r\n              setErr(\"\");\r\n            }, 3000);\r\n            return false;\r\n          } else {\r\n            props.history.push(\"/Accounts\");\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const Accounts = () => {\r\n    setLoginType(!loginType);\r\n  };\r\n\r\n  if (loginType) {\r\n    return (\r\n      <div id=\"login\">\r\n        <div className=\"login-container\">\r\n          <div>\r\n            <div className=\"login-card-top\">\r\n              <h2 style={{ backgroudColor: \"orange\", color: \"black\" }}>\r\n                FoodApp\r\n              </h2>\r\n              <i\r\n                className=\"fa fa-users  account__icon\"\r\n                type=\"button\"\r\n                role=\"button\"\r\n                onClick={() => Accounts()}\r\n              ></i>\r\n            </div>\r\n            <div>\r\n              <img\r\n                src={logo}\r\n                style={{ width: \"60px\", height: \"60px\", marginTop: \"3px\" }}\r\n              />\r\n            </div>\r\n            {errMess === \"\" ? (\r\n              \"\"\r\n            ) : (\r\n              <div className=\"log-err-mess\">{errMess}</div>\r\n            )}\r\n            <form className=\"my-form\">\r\n              <p>\r\n                <label>Password</label>\r\n                <input\r\n                  className=\"input-field\"\r\n                  type=\"password\"\r\n                  value={password}\r\n                  onChange={e => setPassword(e.target.value)}\r\n                />\r\n              </p>\r\n              <p>\r\n                <button\r\n                  type=\"button\"\r\n                  role=\"button\"\r\n                  className=\"loginbtn\"\r\n                  onClick={() => _handleLoginAdmin()}\r\n                  type=\"button\"\r\n                  style={{\r\n                    width: \"90%\",\r\n                    height: \"3rem\",\r\n                    marginTop: \"2rem\",\r\n                    border: \"none\",\r\n                    borderRadius: \".5rem\"\r\n                  }}\r\n                >\r\n                  Admin Login\r\n                </button>\r\n              </p>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      // <div>\r\n      <div id=\"login\">\r\n        <div className=\"login-container\">\r\n          <div>\r\n            <div className=\"login-card-top\">\r\n              <h2 style={{ backgroudColor: \"orange\", color: \"black\" }}>\r\n                FoodApp\r\n              </h2>\r\n              <i\r\n                className=\"fa fa-lock  account__icon\"\r\n                type=\"button\"\r\n                role=\"button\"\r\n                onClick={() => Accounts()}\r\n              ></i>\r\n            </div>\r\n\r\n            <div>\r\n              <img\r\n                src={logo}\r\n                style={{ width: \"60px\", height: \"60px\", marginTop: \"3px\" }}\r\n              />\r\n            </div>\r\n            {errMess === \"\" ? (\r\n              \"\"\r\n            ) : (\r\n              <div className=\"log-err-mess\">{errMess}</div>\r\n            )}\r\n            <form className=\"my-form\">\r\n              <p>\r\n                <label>User Name</label>\r\n                <input\r\n                  className=\"input-field\"\r\n                  type=\"text\"\r\n                  value={userName}\r\n                  onChange={e => setUserName(e.target.value)}\r\n                />\r\n              </p>\r\n              <p>\r\n                <label>Password</label>\r\n                <input\r\n                  className=\"input-field\"\r\n                  type=\"password\"\r\n                  value={password}\r\n                  onChange={e => setPassword(e.target.value)}\r\n                />\r\n              </p>\r\n              <p>\r\n                <button\r\n                  type=\"button\"\r\n                  role=\"button\"\r\n                  className=\"loginbtn\"\r\n                  onClick={() => _handleLogin()}\r\n                  type=\"button\"\r\n                  style={{\r\n                    width: \"90%\",\r\n                    height: \"3rem\",\r\n                    marginTop: \"2rem\",\r\n                    border: \"none\",\r\n                    borderRadius: \".5rem\"\r\n                  }}\r\n                >\r\n                  Login\r\n                </button>\r\n                {/* <label>Email</label> */}\r\n              </p>\r\n            </form>\r\n            <span>\r\n              <a href=\"https://codelabfirm.netlify.app\">Powered by Code Lab</a>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      // </div>\r\n    );\r\n  }\r\n}\r\nexport default Login;\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\component\\header.js",["243","244"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../main.css\";\r\nimport logo from \"./kegali.jpg\";\r\n\r\nfunction Header(props) {\r\n  if (props.title === \"admin\") {\r\n    return (\r\n      <div>\r\n        <div className=\"header-style\">\r\n          <img\r\n            src={logo}\r\n            style={{ width: \"50px\", height: \"50px\", margin: \"3px\" }}\r\n          />\r\n          <div\r\n            className=\"dropdown \"\r\n            style={{ display: \"flex\", alignItems: \"center\", marginLeft: \"90%\" }}\r\n          >\r\n            <div className=\"dropdown\">\r\n              <i\r\n                className=\"fa fa-ellipsis-v  dropbtn\"\r\n                style={{\r\n                  marginRight: \"10px\",\r\n                  fontSize: \"1.5rem\",\r\n                  marginLeft: \"30px\"\r\n                }}\r\n              ></i>\r\n              <div className=\"dropdown-content\">\r\n                <Link to=\"/Sales\">\r\n                  <i className=\"fa fa-money-check-alt\"></i> Sales\r\n                </Link>\r\n                <Link to=\"/Dishes\">\r\n                  <i className=\"fa fa-hamburger\"></i> Dishes\r\n                </Link>\r\n                <Link to=\"/Accounts\">\r\n                  <i className=\"fa fa-users\"></i> Accounts\r\n                </Link>\r\n                <Link to=\"/\">\r\n                  <i className=\"fa fa-lock\"></i> Logout\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <div className=\"header-style\">\r\n          <img\r\n            src={logo}\r\n            style={{ width: \"50px\", height: \"50px\", margin: \"3px\" }}\r\n          />\r\n          {/* <p style={{textAlign: \"left\"}}>KIGALI HOTEL</p> */}\r\n          <Link to=\"/\" className=\"right\">\r\n            <i class=\"fa fa-lock\" style={{ float: \"flex-end\" }}></i>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\component\\modals.js",["245","246"],"import \"../main.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\nimport {\r\n  MDBContainer,\r\n  MDBBtn,\r\n  MDBModal,\r\n  MDBModalBody,\r\n  MDBModalHeader,\r\n  MDBModalFooter\r\n} from \"mdbreact\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Modals(props) {\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [repeatPass, setRepPass] = useState(\"\");\r\n  const [role, setRole] = useState(\"\");\r\n  const [err, setErr] = useState(false);\r\n\r\n  const _handleAddUser = check => {\r\n    if (check === \"add\") {\r\n      const data = {\r\n        firstName,\r\n        lastName,\r\n        userName,\r\n        password,\r\n        repeatPass,\r\n        phone,\r\n        role\r\n      };\r\n      props.onAdd(data);\r\n    } else {\r\n      const data = {\r\n        firstName,\r\n        lastName,\r\n        userName,\r\n        password,\r\n        phone,\r\n        role,\r\n        _id: props.row._id\r\n      };\r\n      props.onEdit(data);\r\n    }\r\n  };\r\n\r\n  const _handleAddDish = check => {\r\n    if (check === \"add-dish\") {\r\n      const data = {\r\n        dishName: firstName,\r\n        price: phone,\r\n        type: check\r\n      };\r\n      props.onAdd(data);\r\n    } else if (check === \"add-liquor\") {\r\n      const data = {\r\n        dishName: firstName,\r\n        price: phone,\r\n        type: check\r\n      };\r\n      props.onAdd(data);\r\n    } else if (check === \"add-beverage\") {\r\n      const data = {\r\n        dishName: firstName,\r\n        price: phone,\r\n        type: check\r\n      };\r\n      props.onAdd(data);\r\n    } else {\r\n      const data = {\r\n        dishName: firstName,\r\n        price: phone,\r\n        _id: props.row._id,\r\n        type: check\r\n      };\r\n      props.onEdit(data);\r\n    }\r\n  };\r\n\r\n  const _handleDelete = data => {\r\n    props.onDelete(data);\r\n  };\r\n\r\n  const _dishPrice = dish => {\r\n    const price = parseInt(dish.price) * parseInt(dish.quantity);\r\n    return price;\r\n  };\r\n\r\n  const _totalQuantity = data => {\r\n    let qt = 0;\r\n    data.forEach(dish => {\r\n      qt += parseInt(dish.quantity);\r\n    });\r\n    return qt;\r\n  };\r\n\r\n  const _totalPrice = data => {\r\n    let tprice = 0;\r\n    data.forEach(dish => {\r\n      let price = parseInt(dish.price) * parseInt(dish.quantity);\r\n      tprice += price;\r\n    });\r\n    return tprice;\r\n  };\r\n\r\n  if (props.title === \"add-user\") {\r\n    return (\r\n      <MDBContainer>\r\n        <MDBModal\r\n          disableBackdrop\r\n          isOpen={props.isOpen}\r\n          toggle={props.toggleUser}\r\n          size=\"lg\"\r\n        >\r\n          <MDBModalHeader\r\n            className=\"modal-title\"\r\n            toggle={() => props.toggleUser(\"add-user\")}\r\n          >\r\n            {props.onErr === \"\" ? (\r\n              <>ADD USER</>\r\n            ) : (\r\n              <div className=\"danger-mssg\">{props.onErr}</div>\r\n            )}\r\n          </MDBModalHeader>\r\n          <MDBModalBody>\r\n            <form>\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <label>First Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setFirstName(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>Last Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setLastName(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>User Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setUserName(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>Phone</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setPhone(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>Password</label>\r\n                  <input\r\n                    type=\"password\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setPassword(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>Repeat Password</label>\r\n                  <input\r\n                    type=\"password\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setRepPass(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <label>Select Role</label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    onChange={e => setRole(e.target.value)}\r\n                  >\r\n                    <option>Select Role</option>\r\n                    <option>Admin</option>\r\n                    <option>Employee</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </MDBModalBody>\r\n          <MDBModalFooter>\r\n            <MDBBtn\r\n              className=\"btn btn-secondary btn-sm\"\r\n              onClick={() => props.toggleUser(\"add-user\")}\r\n            >\r\n              Close\r\n            </MDBBtn>\r\n            <MDBBtn\r\n              className=\"btn btn-primary btn-sm\"\r\n              onClick={() => _handleAddUser(\"add\")}\r\n            >\r\n              Create User\r\n            </MDBBtn>\r\n          </MDBModalFooter>\r\n        </MDBModal>\r\n      </MDBContainer>\r\n    );\r\n  } else if (props.title === \"edit-user\") {\r\n    return (\r\n      <MDBContainer>\r\n        <MDBModal\r\n          disableBackdrop\r\n          isOpen={props.isOpen}\r\n          toggle={props.toggleUser}\r\n          size=\"lg\"\r\n        >\r\n          <MDBModalHeader\r\n            className=\"modal-title\"\r\n            toggle={() => props.toggleUser(\"edit-user\")}\r\n          >\r\n            {props.onErr === \"\" ? (\r\n              <>EDIT USER</>\r\n            ) : (\r\n              <div className=\"danger-mssg\">{props.onErr}</div>\r\n            )}\r\n          </MDBModalHeader>\r\n          <MDBModalBody>\r\n            <form>\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <label>First Name: {props.row.firstName}</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setFirstName(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>Last Name: {props.row.lastName}</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setLastName(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>User Name: {props.row.userName}</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setUserName(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>Phone: {props.row.phone}</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setPhone(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>Password: {props.row.password}</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setPassword(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>Select Role: {props.row.role}</label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    onChange={e => setRole(e.target.value)}\r\n                  >\r\n                    <option>Select Role</option>\r\n                    <option>Admin</option>\r\n                    <option>Employee</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </MDBModalBody>\r\n          <MDBModalFooter>\r\n            <MDBBtn\r\n              className=\"btn btn-secondary btn-sm\"\r\n              onClick={() => props.toggleUser(\"edit-user\")}\r\n            >\r\n              Close\r\n            </MDBBtn>\r\n            <MDBBtn\r\n              className=\"btn btn-success btn-sm\"\r\n              onClick={() => _handleAddUser(\"edit\")}\r\n            >\r\n              Save changes\r\n            </MDBBtn>\r\n            <MDBBtn\r\n              className=\"btn btn-danger btn-sm\"\r\n              onClick={() => _handleDelete(props.row._id)}\r\n            >\r\n              Delete User\r\n            </MDBBtn>\r\n          </MDBModalFooter>\r\n        </MDBModal>\r\n      </MDBContainer>\r\n    );\r\n  } else if (props.title === \"add-dish\") {\r\n    return (\r\n      <MDBContainer>\r\n        <MDBModal\r\n          disableBackdrop\r\n          isOpen={props.isOpen}\r\n          toggle={props.toggleDish}\r\n          size=\"lg\"\r\n        >\r\n          <MDBModalHeader\r\n            className=\"modal-title\"\r\n            toggle={() => props.toggleDish(\"add-dish\")}\r\n          >\r\n            {props.onErr === \"\" ? (\r\n              <>ADD DISH</>\r\n            ) : (\r\n              <div className=\"danger-mssg\">{props.onErr}</div>\r\n            )}\r\n          </MDBModalHeader>\r\n          <MDBModalBody>\r\n            <form>\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <label>Dish Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setFirstName(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>Price</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setPhone(e.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </MDBModalBody>\r\n          <MDBModalFooter>\r\n            <MDBBtn\r\n              className=\"btn btn-secondary btn-sm\"\r\n              onClick={() => props.toggleDish(\"add-dish\")}\r\n            >\r\n              Close\r\n            </MDBBtn>\r\n            <MDBBtn\r\n              className=\"btn btn-success btn-sm\"\r\n              onClick={() => _handleAddDish(\"add-dish\")}\r\n            >\r\n              Save changes\r\n            </MDBBtn>\r\n          </MDBModalFooter>\r\n        </MDBModal>\r\n      </MDBContainer>\r\n    );\r\n  } else if (\r\n    props.title === \"edit-dish\" ||\r\n    props.title === \"edit-liquor\" ||\r\n    props.title === \"edit-beverage\"\r\n  ) {\r\n    return (\r\n      <MDBContainer>\r\n        <MDBModal\r\n          disableBackdrop\r\n          isOpen={props.isOpen}\r\n          toggle={props.toggleDish}\r\n          size=\"lg\"\r\n        >\r\n          <MDBModalHeader\r\n            className=\"modal-title\"\r\n            toggle={() => props.toggleDish(\"edit-dish\")}\r\n          >\r\n            {props.onErr === \"\" ? (\r\n              <>EDIT SELECTION</>\r\n            ) : (\r\n              <div className=\"danger-mssg\">{props.onErr}</div>\r\n            )}\r\n          </MDBModalHeader>\r\n          <MDBModalBody>\r\n            <form>\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <label>\r\n                    Name:{\" \"}\r\n                    {props.row.dishName ||\r\n                      props.row.liqureName ||\r\n                      props.row.beverageName}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setFirstName(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>Price: {props.row.price}</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setPhone(e.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </MDBModalBody>\r\n          <MDBModalFooter>\r\n            <MDBBtn\r\n              className=\"btn btn-secondary btn-sm\"\r\n              onClick={() => props.toggleDish(\"edit-dish\")}\r\n            >\r\n              Close\r\n            </MDBBtn>\r\n            <MDBBtn\r\n              className=\"btn btn-success btn-sm\"\r\n              onClick={() => {\r\n                if (props.title === \"edit-dish\") {\r\n                  _handleAddDish(\"edit-dish\");\r\n                } else if (props.title === \"edit-beverage\") {\r\n                  _handleAddDish(\"edit-beverage\");\r\n                } else {\r\n                  _handleAddDish(\"edit-liquor\");\r\n                }\r\n              }}\r\n            >\r\n              Save changes\r\n            </MDBBtn>\r\n            <MDBBtn\r\n              className=\"btn btn-success btn-sm\"\r\n              onClick={() => {\r\n                if (props.title === \"edit-dish\") {\r\n                  const data = {\r\n                    _id: props.row._id,\r\n                    type: \"delete-dish\"\r\n                  };\r\n                  _handleDelete(data);\r\n                } else if (props.title === \"edit-beverage\") {\r\n                  const data = {\r\n                    _id: props.row._id,\r\n                    type: \"delete-beverage\"\r\n                  };\r\n                  _handleDelete(data);\r\n                } else {\r\n                  const data = {\r\n                    _id: props.row._id,\r\n                    type: \"delete-liquor\"\r\n                  };\r\n                  _handleDelete(data);\r\n                }\r\n              }}\r\n            >\r\n              Delete Item\r\n            </MDBBtn>\r\n          </MDBModalFooter>\r\n        </MDBModal>\r\n      </MDBContainer>\r\n    );\r\n  } else if (props.title === \"cart-modal\") {\r\n    return (\r\n      <MDBContainer>\r\n        <MDBModal\r\n          disableBackdrop\r\n          isOpen={props.isOpen}\r\n          toggle={props.toggleModal}\r\n          size=\"lg\"\r\n          centered\r\n        >\r\n          <MDBModalHeader\r\n            className=\"modal-title\"\r\n            toggle={() => props.toggleModal()}\r\n          >\r\n            CART\r\n          </MDBModalHeader>\r\n          <MDBModalBody>\r\n            <div className=\"car-header\">\r\n              <div className=\"cart-name\">Item Name</div>\r\n              <div className=\"cart-number\">Number Of Parcks</div>\r\n              <div className=\"cart-price\">Price(GHC)</div>\r\n              <div className=\"cart-remove-h\">Remove</div>\r\n            </div>\r\n            {props.data.map(item => {\r\n              return (\r\n                <div className=\"cart-body\">\r\n                  <div className=\"cart-name\">\r\n                    {item.dishName || item.liqureName || item.beverageName}\r\n                  </div>\r\n                  <div className=\"cart-number\">{item.quantity}</div>\r\n                  <div className=\"cart-price\">{_dishPrice(item)}</div>\r\n                  <div\r\n                    className=\"cart-remove\"\r\n                    type=\"button\"\r\n                    role=\"button\"\r\n                    onClick={() => props.onRemove(item._id)}\r\n                  >\r\n                    <i className=\"fa fa-trash-alt\"></i>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n            <div className=\"cart-body\">\r\n              <div className=\"cart-total\">Totals</div>\r\n              <div className=\"cart-number-t\">{_totalQuantity(props.data)}</div>\r\n              <div className=\"cart-price-t\">{_totalPrice(props.data)}</div>\r\n            </div>\r\n          </MDBModalBody>\r\n          <MDBModalFooter>\r\n            <MDBBtn\r\n              className=\"btn btn-secondary btn-sm\"\r\n              onClick={() => props.toggleModal()}\r\n            >\r\n              Close\r\n            </MDBBtn>\r\n            <MDBBtn\r\n              className=\"btn btn-success btn-sm\"\r\n              onClick={() => props.onBuy()}\r\n              style={{ paddding: \"2rem\", backgroupColor: \"red\" }}\r\n            >\r\n              Buy\r\n            </MDBBtn>\r\n            <MDBBtn\r\n              className=\"btn btn-success btn-sm\"\r\n              onClick={() => props.onClear()}\r\n            >\r\n              Clear Cart\r\n            </MDBBtn>\r\n          </MDBModalFooter>\r\n        </MDBModal>\r\n      </MDBContainer>\r\n    );\r\n  } else if (props.title === \"add-liquor\") {\r\n    return (\r\n      <MDBContainer>\r\n        <MDBModal\r\n          disableBackdrop\r\n          isOpen={props.isOpen}\r\n          toggle={props.toggleDish}\r\n          size=\"lg\"\r\n        >\r\n          <MDBModalHeader\r\n            className=\"modal-title\"\r\n            toggle={() => props.toggleDish(\"add-liquor\")}\r\n          >\r\n            {props.onErr === \"\" ? (\r\n              <>ADD LIQUOR</>\r\n            ) : (\r\n              <div className=\"danger-mssg\">{props.onErr}</div>\r\n            )}\r\n          </MDBModalHeader>\r\n          <MDBModalBody>\r\n            <form>\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <label>Liquor Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setFirstName(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>Price</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setPhone(e.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </MDBModalBody>\r\n          <MDBModalFooter>\r\n            <MDBBtn\r\n              className=\"btn btn-secondary btn-sm\"\r\n              onClick={() => props.toggleDish(\"add-liquor\")}\r\n            >\r\n              Close\r\n            </MDBBtn>\r\n            <MDBBtn\r\n              className=\"btn btn-success btn-sm\"\r\n              onClick={() => _handleAddDish(\"add-liquor\")}\r\n            >\r\n              Save changes\r\n            </MDBBtn>\r\n          </MDBModalFooter>\r\n        </MDBModal>\r\n      </MDBContainer>\r\n    );\r\n  } else if (props.title === \"add-beverage\") {\r\n    return (\r\n      <MDBContainer>\r\n        <MDBModal\r\n          disableBackdrop\r\n          isOpen={props.isOpen}\r\n          toggle={props.toggleDish}\r\n          size=\"lg\"\r\n        >\r\n          <MDBModalHeader\r\n            className=\"modal-title\"\r\n            toggle={() => props.toggleDish(\"add-beverage\")}\r\n          >\r\n            {props.onErr === \"\" ? (\r\n              <>ADD BEVERAGE</>\r\n            ) : (\r\n              <div className=\"danger-mssg\">{props.onErr}</div>\r\n            )}\r\n          </MDBModalHeader>\r\n          <MDBModalBody>\r\n            <form>\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <label>Beverage Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setFirstName(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label>Price</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    onChange={e => setPhone(e.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </MDBModalBody>\r\n          <MDBModalFooter>\r\n            <MDBBtn\r\n              className=\"btn btn-secondary btn-sm\"\r\n              onClick={() => props.toggleDish(\"add-beverage\")}\r\n            >\r\n              Close\r\n            </MDBBtn>\r\n            <MDBBtn\r\n              className=\"btn btn-success btn-sm\"\r\n              onClick={() => _handleAddDish(\"add-beverage\")}\r\n            >\r\n              Save changes\r\n            </MDBBtn>\r\n          </MDBModalFooter>\r\n        </MDBModal>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\component\\print.js",["247"],"import \"../main.css\";\r\nimport logo from \"./kegali.jpg\";\r\n\r\nconst Print = props => {\r\n  if (props.onPrint) {\r\n    let printContents = document.getElementById(\"printme\").innerHTML;\r\n    let originalContents = document.body.innerHTML;\r\n    document.body.innerHTML = printContents;\r\n    window.print();\r\n    document.body.innerHTML = originalContents;\r\n    window.location.reload();\r\n  }\r\n\r\n  const _totalPrice = () => {\r\n    let tprice = 0;\r\n    props.data.forEach(dish => {\r\n      tprice += parseInt(dish.quantity) * parseInt(dish.price);\r\n    });\r\n    return tprice;\r\n  };\r\n  return (\r\n    <div id=\"printme\">\r\n      <div className=\"print-view\">\r\n        <div>\r\n          <img\r\n            src={logo}\r\n            style={{ width: \"50px\", height: \"50px\", margin: \"3px\" }}\r\n          />\r\n        </div>\r\n        <div className=\"reciept-title\">RECIEPT</div>\r\n        {props.data.map(dish => {\r\n          return (\r\n            <div className=\"reciept-body\">\r\n              <div className=\"reciept-dish\">\r\n                {dish.dishName || dish.liqureName || dish.beverageName}:\r\n              </div>\r\n              <div className=\"reciept-price\">\r\n                GHC {parseInt(dish.quantity) * parseInt(dish.price)}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n        <div className=\"reciept-body\">\r\n          <div className=\"reciept-dish\">Total</div>\r\n          <div className=\"reciept-price\">{_totalPrice()}</div>\r\n        </div>\r\n        <hr />\r\n        <div>{new Date().toLocaleString()}</div>\r\n        <div>Kegali Hotel</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Print;\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\food\\src\\main\\app\\component\\tables.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\index.js",[],["248","249"],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\App.js",["250","251","252"],"import { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Login from \"./main/auth/login\";\r\nimport LoadingPage from \"./main/app/component/loaders/loading\";\r\nimport MainPage from \"./main/app/main\";\r\nimport _fetchAssets from \"./main/app/funtions\";\r\nimport { functions } from \"./main/app/funtions\";\r\nconst { Data } = require(\"./main/app/data/data\");\r\nconst keyStoreDbInstance = Data.keyStoreDbInstance;\r\nconst typesStore = Data.assetTypeDbInstance;\r\nconst departmentStore = Data.departmentDbInstance;\r\nconst apiKeyUrl = Data.apiKeyCheckUrl;\r\nconst usersBaseUrl = Data.usersBaseUrl;\r\nconst initialsStore = Data.initDbInstance;\r\n\r\nfunction App() {\r\n  const [isKey, setIsKey] = useState(\"\");\r\n  const [loader, setLoader] = useState(false);\r\n  const [notify, setNotify] = useState(false);\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [logDriect, setLogDirect] = useState(false);\r\n  const [move, setMove] = useState(\"loading\");\r\n  const [assets, setAssets] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [types, setTypes] = useState([]);\r\n  const [department, setDepartment] = useState([]);\r\n  const [initials, setInitials] = useState([]);\r\n  const [sortedCond, setSortedCond] = useState({});\r\n  const [sortedStatus, setSortedStauts] = useState({});\r\n  const [value, setValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    _checkApiKey();\r\n    _getTypes();\r\n    _getDepartments();\r\n    _getInitial();\r\n  }, []);\r\n\r\n  // check api key\r\n  const _checkApiKey = async () => {\r\n    await keyStoreDbInstance.readAll().then((res) => {\r\n      if (res.length !== 0) {\r\n        setIsKey(res[0].key);\r\n      }\r\n    });\r\n  };\r\n\r\n  // read all asset types\r\n  const _getTypes = async () => {\r\n    await typesStore.readAll().then((res) => {\r\n      if (res.length !== 0) {\r\n        return setTypes(res);\r\n      }\r\n    });\r\n  };\r\n\r\n  // read all departments\r\n  const _getDepartments = async () => {\r\n    await departmentStore.readAll().then((res) => {\r\n      if (res.length !== 0) {\r\n        setDepartment(res);\r\n      }\r\n    });\r\n  };\r\n\r\n  // read all initilas\r\n  const _getInitial = async () => {\r\n    const res = await functions._getInitials();\r\n    if (res.length > 0) {\r\n      setInitials(res[0].data);\r\n    }\r\n  };\r\n\r\n  // configure system with  api key\r\n  const _handleConfig = async (key) => {\r\n    if (key === \"\") {\r\n      setType(\"danger\");\r\n      setMsg(\"Please the field cannot be empty!\");\r\n      setNotify(true);\r\n    } else if (key.length < 10) {\r\n      setType(\"danger\");\r\n      setMsg(\"Invalid key, Please try again!\");\r\n      setNotify(true);\r\n    } else {\r\n      setLoader(true);\r\n      fetch(apiKeyUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          apiKey: key,\r\n        }),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((res) => {\r\n          if (res.success === 1) {\r\n            keyStoreDbInstance.create({ key: key });\r\n            setIsKey(key);\r\n            setLoader(false);\r\n          } else {\r\n            setLoader(false);\r\n            setType(\"danger\");\r\n            setMsg(res.message);\r\n            setNotify(true);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  // handle login\r\n  const _handleLog = async (data) => {\r\n    const { email, password } = data;\r\n    const apiKey = isKey + \"-u\";\r\n    if (email === \"\" || password === \"\") {\r\n      setType(\"danger\");\r\n      setMsg(\"Please the field cannot be empty!\");\r\n      setNotify(true);\r\n    } else if (password < 10) {\r\n      setType(\"danger\");\r\n      setMsg(\"Either email or password is wrong, Please try again!\");\r\n      setNotify(true);\r\n    } else {\r\n      setLoader(true);\r\n      fetch(usersBaseUrl + \"login/\" + apiKey, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          email: email,\r\n          password: password,\r\n        }),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((res) => {\r\n          if (res.success === 1) {\r\n            const data = res.data;\r\n            localStorage.setItem(\"user\", JSON.stringify(data));\r\n            setLoader(false);\r\n            setMove(\"loading\");\r\n            setLogDirect(true);\r\n          } else {\r\n            setLoader(false);\r\n            setType(\"danger\");\r\n            setMsg(res.message);\r\n            setNotify(true);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  // load data concurently\r\n  const _fetchAll = async () => {\r\n    const data = await functions._FetchallDAta(isKey);\r\n    if (data.length > 0) {\r\n      const users = data[0];\r\n      const assets = data[1];\r\n      if (users.success === 0) {\r\n        // setType(\"danger\");\r\n        // setMsg(\r\n        //   \"No Users found on the system, Please use the right api key provided to you!\"\r\n        // );\r\n        // setNotify(true);\r\n        return false;\r\n      } else {\r\n        setUsers(users.data);\r\n        setLoader(false);\r\n        setMove(\"dashboard\");\r\n      }\r\n      if (assets.success === 0) {\r\n        // setType(\"danger\");\r\n        // setMsg(\r\n        //   \"No Assets found on the system, Please use the right api key provided to you!\"\r\n        // );\r\n        // setNotify(true);\r\n        return false;\r\n      } else {\r\n        setAssets(assets.data);\r\n        setLoader(false);\r\n        _sortAssetsCond(assets.data);\r\n        _sortAssetsStatus(assets.data);\r\n        _valuateAssets(assets.data);\r\n        setMove(\"dashboard\");\r\n      }\r\n    } else {\r\n      setType(\"danger\");\r\n      setMsg(\r\n        \"No Data found on the system, Please use the right api key provided to you!\"\r\n      );\r\n      setNotify(true);\r\n    }\r\n  };\r\n\r\n  const _handlegetUsers = async () => {\r\n    const us = await functions._getUsers();\r\n    setUsers(us);\r\n  };\r\n\r\n  const _handleGetAssets = async () => {\r\n    const as = await functions._fetchAssets();\r\n    if (as !== null) {\r\n      setAssets(as);\r\n      _sortAssetsCond(as);\r\n      _sortAssetsStatus(as);\r\n      _valuateAssets(as);\r\n    } else {\r\n      setAssets([]);\r\n    }\r\n  };\r\n\r\n  // handle sort assets\r\n  const _sortAssetsCond = async (data) => {\r\n    if (data !== null || data !== undefined) {\r\n      const groupInfo = data.reduce((groups, item) => {\r\n        const { NEW = 0, OLD = 0, DAMAGED = 0, REPAIRS = 0, TRANSFERED } = groups;\r\n        if (item.CONDITION === \"NEW\") {\r\n          return { ...groups, NEW: NEW + 1 };\r\n        } else if (item.CONDITION === \"OLD\") {\r\n          return { ...groups, OLD: OLD + 1 };\r\n        } else if (item.CONDITION === \"DAMAGED\") {\r\n          return { ...groups, DAMAGED: DAMAGED + 1 };\r\n        } else if (item.CONDITION === \"REPAIRS\") {\r\n          return { ...groups, REPAIRS: REPAIRS + 1 };\r\n        } else if (item.CONDITION === \"TRANSFERED\") {\r\n          return { ...groups, TRANSFERED: TRANSFERED + 1 };\r\n        }\r\n      }, {});\r\n      setSortedCond(groupInfo);\r\n    }\r\n  };\r\n\r\n  // handle sort assets\r\n  const _sortAssetsStatus = async (data) => {\r\n    if (data !== null || data !== undefined) {\r\n      const groupInfo = data.reduce((groups, item) => {\r\n        const { ACTIVE = 0, IN_ACTIVE = 0 } = groups;\r\n        if (item.STATUS === \"ACTIVE\") {\r\n          return { ...groups, ACTIVE: ACTIVE + 1 };\r\n        } else if (item.STATUS === \"IN-ACTIVE\") {\r\n          return { ...groups, IN_ACTIVE: IN_ACTIVE + 1 };\r\n        }\r\n      }, {});\r\n      setSortedStauts(groupInfo);\r\n    }\r\n  };\r\n\r\n  // handle valuate assets\r\n  const _valuateAssets = async (data) => {\r\n    if (data !== null || data !== undefined) {\r\n      let value = 0;\r\n      data.forEach((item) => {\r\n        value += parseInt(item.VALUE);\r\n      });\r\n      setValue(value);\r\n    }\r\n  };\r\n\r\n  // handle add assets type\r\n  const _addTypes = async (data) => {\r\n    if (data === \"\") {\r\n      setType(\"danger\");\r\n      setMsg(\"Asset Type cannot be empty!\");\r\n      setNotify(true);\r\n    } else if (types.some((item) => item.type === data)) {\r\n      setType(\"danger\");\r\n      setMsg(\"This Asset Type Already Exist!\");\r\n      setNotify(true);\r\n    } else {\r\n      setType(\"success\");\r\n      setMsg(\"Asset type added succefully!\");\r\n      setNotify(true);\r\n      typesStore.create({ type: data });\r\n      _getTypes();\r\n    }\r\n  };\r\n\r\n  // handle add department\r\n  const _addDepartment = async (data) => {\r\n    if (data === \"\") {\r\n      setType(\"danger\");\r\n      setMsg(\"Department cannot be empty!\");\r\n      setNotify(true);\r\n    } else if (department.some((item) => item.data === data)) {\r\n      setType(\"danger\");\r\n      setMsg(\"This department has already been added!\");\r\n      setNotify(true);\r\n    } else {\r\n      departmentStore.create({ data });\r\n      setType(\"success\");\r\n      setMsg(\"Department saved successfully!\");\r\n      setNotify(true);\r\n      _getDepartments();\r\n    }\r\n  };\r\n\r\n  // handle add initials\r\n  const _addInitials = (data) => {\r\n    if (data === \"\") {\r\n      setType(\"danger\");\r\n      setMsg(\"Initials cannot be empty!\");\r\n      setNotify(true);\r\n    } else if (initials.length > 0) {\r\n      setType(\"danger\");\r\n      setMsg(\"Initials has been set already!\");\r\n      setNotify(true);\r\n    } else {\r\n      initialsStore.create({ data });\r\n      setType(\"success\");\r\n      setMsg(\"Initials saved successfully!\");\r\n      setNotify(true);\r\n      _getInitial();\r\n    }\r\n  };\r\n\r\n  // close notification bar\r\n  const _handleClose = () => {\r\n    setNotify(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={(props) => (\r\n              <Login\r\n                {...props}\r\n                myKey={isKey}\r\n                configure={_handleConfig}\r\n                loader={loader}\r\n                notify={notify}\r\n                message={msg}\r\n                type={type}\r\n                _login={_handleLog}\r\n                _redirect={logDriect}\r\n                moveTODash={move}\r\n                close={() => setNotify(false)}\r\n                loadAllData={_fetchAll}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/loading\"\r\n            render={(props) => <LoadingPage {...props} />}\r\n          />\r\n          <Route\r\n            path=\"/main\"\r\n            render={(props) => (\r\n              <MainPage\r\n                {...props}\r\n                assets={assets}\r\n                users={users}\r\n                types={types}\r\n                initials={initials}\r\n                sorted={sortedCond}\r\n                status={sortedStatus}\r\n                value={value}\r\n                onAddType={_addTypes}\r\n                onAddDep={_addDepartment}\r\n                addInit={_addInitials}\r\n                type={type}\r\n                message={msg}\r\n                notify={notify}\r\n                getUsers={_handlegetUsers}\r\n                getAssets={_handleGetAssets}\r\n                onClose={_handleClose}\r\n                isKey={isKey}\r\n              />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\reportWebVitals.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\main.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\auth\\login.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\loaders\\loading.js",["253"],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\notifications.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\loaders\\elipses.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\data\\data.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\dashboard\\index.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\aside.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\assets\\index.js",["254"],"import { useEffect, useState, useRef } from \"react\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { PrintAllAssets } from \"../funtions/prints/allAssets\";\r\nimport { Redirect } from \"react-router\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport Table from \"../component/tables/table\";\r\nimport AssetDetails from \"../others/assetDetails\";\r\n\r\nexport default function Assets(props) {\r\n  const [tdata, setTData] = useState([]);\r\n  const [selectedPage, setSelectedd] = useState(0);\r\n  const [redirect, setRedirect] = useState(\"asset\");\r\n  const [data, setData] = useState({});\r\n\r\n  const assets = props.assets;\r\n  const loading = props.loading;\r\n  const departments = props.departments;\r\n  const user = props.user;\r\n  const type = props.type;\r\n  const msg = props.msg;\r\n  const notify = props.notify;\r\n\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  let indexMin = selectedPage * 5;\r\n  let indexMax = indexMin + 5;\r\n  let paginatedArray =\r\n    assets === null || assets === undefined\r\n      ? []\r\n      : assets.filter((x, index) => index >= indexMin && index < indexMax);\r\n\r\n  // handling search\r\n  const _handleSearch = (value) => {\r\n    let newArr = [];\r\n    if (value !== \"\") {\r\n      assets.forEach((item) => {\r\n        if (\r\n          item.SERIALNUMBER.toLocaleUpperCase().includes(value.toUpperCase())\r\n        ) {\r\n          newArr.push(item);\r\n        }\r\n      });\r\n      setTData(newArr);\r\n    } else {\r\n      setTData(paginatedArray);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTData(paginatedArray);\r\n  }, []);\r\n\r\n  // handling pagination\r\n  const _handlePaginate = (value) => {\r\n    if (value === \"next\") {\r\n      setSelectedd(selectedPage + 1);\r\n      setTData(paginatedArray);\r\n    } else if (value === \"prev\") {\r\n      setSelectedd(selectedPage - 1);\r\n      setTData(paginatedArray);\r\n    }\r\n  };\r\n\r\n  const _handleRowClick = (item) => {\r\n    setData(item);\r\n    setRedirect(\"asset_details\");\r\n  };\r\n\r\n  const _handleBackClick = () => {\r\n    setData({});\r\n    setRedirect(\"asset\");\r\n  };\r\n\r\n  const _handleEditAsset = async (data) => {\r\n    const res = await props.onEditAsset(data);\r\n    if (res) {\r\n      setData({});\r\n      setTData(paginatedArray);\r\n      setRedirect(\"asset\");\r\n    }\r\n  };\r\n\r\n  const _handleDel = async (id) => {\r\n    const res = await props.onDel(id);\r\n    if (res) {\r\n      setData({});\r\n      setTData(paginatedArray);\r\n      setRedirect(\"asset\");\r\n    }\r\n  };\r\n\r\n  const _handleAddRep = async (data) => {\r\n    await props.onAddRep(data);\r\n    setTData(paginatedArray);\r\n    setRedirect(\"asset_details\");\r\n  };\r\n\r\n  const _handleAssetsValue = () => {\r\n    var res = 0;\r\n    assets.forEach((item) => {\r\n      res = res + parseInt(item.VALUE);\r\n    });\r\n    return res;\r\n  };\r\n\r\n  if (redirect === \"asset_details\") {\r\n    return (\r\n      <AssetDetails\r\n        data={data}\r\n        goBack={_handleBackClick}\r\n        loading={loading}\r\n        departments={departments}\r\n        onEditAsset={_handleEditAsset}\r\n        onDelete={_handleDel}\r\n        onAddRep={_handleAddRep}\r\n        user={user}\r\n        notify={notify}\r\n        msg={msg}\r\n        type={type}\r\n        stopLoading={() => props.stopLoading()}\r\n      />\r\n    );\r\n  } else if (redirect === \"asset\") {\r\n    return (\r\n      <div>\r\n        <PageTitle\r\n          title=\"Assets\"\r\n          createAsset={props.onCreate}\r\n          onSettingsClicked={() => setRedirect(\"settings\")}\r\n        />\r\n        <PrintAllAssets\r\n          ref={componentRef}\r\n          assets={assets}\r\n          value={_handleAssetsValue}\r\n        />\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 card_height_100\">\r\n            <div className=\"white_card mb_20\">\r\n              <div className=\"white_card_header\">\r\n                <div className=\"box_header m-0\">\r\n                  <div className=\"main-title\">\r\n                    <h3 className=\"m-0\">List Of Assets </h3>\r\n                  </div>\r\n                  <div className=\"float-lg-right float-none sales_renew_btns justify-content-end\">\r\n                    <span\r\n                      style={{\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                    >\r\n                      ASSETS REG\r\n                    </span>\r\n                    <span\r\n                      type=\"button\"\r\n                      role=\"button\"\r\n                      style={{\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                      onClick={handlePrint}\r\n                    >\r\n                      <i title=\"print all assets\" className=\"fa fa-print\"></i>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"white_card_body\">\r\n                <div>\r\n                  <div className=\"form-group mb-0\">\r\n                    <input\r\n                      type=\"Search\"\r\n                      className=\"form-control\"\r\n                      name=\"inputSearch\"\r\n                      id=\"inputSearch\"\r\n                      placeholder=\"Search Assets by serial number\"\r\n                      onChange={(e) => _handleSearch(e.target.value)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <Table data={tdata} onClick={_handleRowClick} />\r\n                <div className=\"col-lg-12\">\r\n                  <div className=\"white_box mb_30\">\r\n                    <nav aria-label=\"Page navigation example\">\r\n                      <ul className=\"pagination justify-content-center\">\r\n                        {selectedPage >= 1 ? (\r\n                          <li\r\n                            className=\"page-item\"\r\n                            type=\"button\"\r\n                            role=\"button\"\r\n                            onClick={() => _handlePaginate(\"prev\")}\r\n                          >\r\n                            <span className=\"page-link\">Previous</span>\r\n                          </li>\r\n                        ) : (\r\n                          <li className=\"page-item disabled\">\r\n                            <span className=\"page-link\" aria-disabled=\"true\">\r\n                              Previous\r\n                            </span>\r\n                          </li>\r\n                        )}\r\n                        {tdata.length === 0 ? (\r\n                          <li className=\"page-item disabled\">\r\n                            <span className=\"page-link\" aria-disabled=\"true\">\r\n                              Next\r\n                            </span>\r\n                          </li>\r\n                        ) : (\r\n                          <li\r\n                            className=\"page-item\"\r\n                            type=\"button\"\r\n                            role=\"button\"\r\n                            onClick={() => _handlePaginate(\"next\")}\r\n                          >\r\n                            <span className=\"page-link\">Next</span>\r\n                          </li>\r\n                        )}\r\n                      </ul>\r\n                    </nav>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (redirect === \"settings\") {\r\n    return <Redirect to=\"/main/settings\" />;\r\n  }\r\n}\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\reports\\index.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\settings\\index.js",["255","256","257"],"import { useState } from \"react\";\r\nimport LoadingPage from \"../component/loaders/loading\";\r\nimport Notifications from \"../component/notifications\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport Users from \"../others/users\";\r\n\r\nexport default function Settings(props) {\r\n  const [redirect, setRdirect] = useState(\"settings\");\r\n  const [types, setTypes] = useState(\"\");\r\n  const [depart, setDep] = useState(\"\");\r\n  const [init, setInit] = useState(\"\");\r\n  const [usn, setusn] = useState(false);\r\n  const [usmsg, setusmg] = useState(\"\");\r\n  const [ustype, setusType] = useState(\"\");\r\n  const [branch, setBranch] = useState(\"\");\r\n\r\n  const users = props.data;\r\n  const notify = props.notify;\r\n  const msg = props.message;\r\n  const type = props.type;\r\n  const loading = props.loading;\r\n  const userDirect = props.redirect;\r\n  const user = props.user;\r\n\r\n  const _handleUsers = () => {\r\n    if (user.ROLE === \"CLARK\" || user.ROLE === \"CEO\") {\r\n      setusType(\"danger\");\r\n      setusmg(\"You are not authorised to view this page!\");\r\n      setusn(true);\r\n      return false;\r\n    } else {\r\n      setRdirect(\"users\");\r\n    }\r\n  };\r\n\r\n  const _handleBack = () => {\r\n    setRdirect(\"settings\");\r\n  };\r\n  const _handleLogOut = () => {\r\n    localStorage.clear();\r\n    setRdirect(\"logout\");\r\n  };\r\n\r\n  const _handleAddType = async (event) => {\r\n    event.preventDefault();\r\n    if (user.ROLE === \"CEO\") {\r\n      setusType(\"danger\");\r\n      setusmg(\"You are not authorised to view this page!\");\r\n      setusn(true);\r\n      return false;\r\n    } else {\r\n      props.onAddType(types);\r\n    }\r\n  };\r\n\r\n  const _handleAddbranch = () => {\r\n    if (user.ROLE === \"CEO\") {\r\n      setusType(\"danger\");\r\n      setusmg(\"You are not authorised to view this page!\");\r\n      setusn(true);\r\n      return false;\r\n    } else {\r\n      props.onAddBranch(branch);\r\n    }\r\n  };\r\n\r\n  const _handleAddDep = async (event) => {\r\n    event.preventDefault();\r\n    if (user.ROLE === \"CEO\") {\r\n      setusType(\"danger\");\r\n      setusmg(\"You are not authorised to view this page!\");\r\n      setusn(true);\r\n      return false;\r\n    } else {\r\n      props.onAddDep(depart);\r\n    }\r\n  };\r\n\r\n  // add company initials to the system\r\n  const _handleAddInit = async () => {\r\n    if (user.ROLE === \"CEO\") {\r\n      setusType(\"danger\");\r\n      setusmg(\"You are not authorised to view this page!\");\r\n      setusn(true);\r\n      return false;\r\n    } else {\r\n      props.onAddInit(init);\r\n    }\r\n  };\r\n\r\n  const _handleClose = (data) => {\r\n    setusn(false);\r\n    props.onClose(data);\r\n  };\r\n\r\n  const _handleGetUsers = async (data) => {\r\n    props.fetchUsers(data);\r\n  };\r\n\r\n  const _handleAddUsers = (data) => {\r\n    props.onAddUsers(data);\r\n  };\r\n\r\n  const _handleDelUser = async (id) => {\r\n    props.onDelUser(id);\r\n  };\r\n\r\n  const _handleEditUser = (data) => {\r\n    props.editUser(data);\r\n  };\r\n\r\n  const _handleChangeStsate = () => {\r\n    props.changeState();\r\n  };\r\n\r\n  if (redirect === \"users\") {\r\n    return (\r\n      <Users\r\n        back={_handleBack}\r\n        getUsers={_handleGetUsers}\r\n        data={users}\r\n        addUsers={_handleAddUsers}\r\n        notify={notify}\r\n        message={msg}\r\n        type={type}\r\n        loading={loading}\r\n        onClose={_handleClose}\r\n        redirect={userDirect}\r\n        move={props.move}\r\n        delete={_handleDelUser}\r\n        editUser={_handleEditUser}\r\n        onChangeState={_handleChangeStsate}\r\n        stopLoading={() => props.stopLoading()}\r\n      />\r\n    );\r\n  } else if (redirect === \"settings\") {\r\n    return (\r\n      <div>\r\n        <PageTitle title=\"Settings Page\" onLogOut={_handleLogOut} />\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 card_height_100\">\r\n            <div className=\"white_card mb_20\">\r\n              <div className=\"white_card_body row\">\r\n                <div className=\"col-lg-8 card_height_100\">\r\n                  <div className=\"white_card mb_20\">\r\n                    <div className=\"white_card_header\">\r\n                      <div className=\"box_header m-0\">\r\n                        <div className=\"main-title\">\r\n                          <h3 className=\"m-0\">System Settings </h3>\r\n                        </div>\r\n                        <div className=\"float-lg-right float-none sales_renew_btns justify-content-end\" />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"white_card_body\">\r\n                      <form>\r\n                        {props.notify || usn ? (\r\n                          <Notifications\r\n                            type={props.type || ustype}\r\n                            message={props.message || usmsg}\r\n                            onAction={_handleClose}\r\n                          />\r\n                        ) : (\r\n                          <></>\r\n                        )}\r\n                        <small style={{ color: \"red\" }}>\r\n                          Enter new asset type and save.\r\n                        </small>\r\n                        <div className=\"input-group mb-3\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Add New Asset Type\"\r\n                            aria-label=\"Add New Asset Type\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setTypes(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                          <div className=\"input-group-append\">\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"submit\"\r\n                              onClick={_handleAddType}\r\n                            >\r\n                              Save Type\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                        <small style={{ color: \"red\" }}>\r\n                          Enter new department name and save.\r\n                        </small>\r\n                        <div className=\"input-group mb-3\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Create Department\"\r\n                            aria-label=\"Create Department\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setDep(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                          <div className=\"input-group-append\">\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              role=\"button\"\r\n                              onClick={_handleAddDep}\r\n                            >\r\n                              Save Department\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                        <small style={{ color: \"red\" }}>\r\n                          Enter a branch of your company and save.\r\n                        </small>\r\n                        <div className=\"input-group mb-3\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Add new branch\"\r\n                            aria-label=\"Add new branch\"\r\n                            onChange={(e) =>\r\n                              setBranch(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                          <div className=\"input-group-append\">\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              role=\"button\"\r\n                              onClick={(e) => _handleAddbranch(e)}\r\n                            >\r\n                              Add Brach\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                        <small style={{ color: \"red\" }}>\r\n                          Enter a 3 letter word or abbriviation of your company.\r\n                        </small>\r\n                        <div className=\"input-group mb-3\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Add Company/Organisation's Iniatials\"\r\n                            aria-label=\"Add Company/Organisation's Iniatials\"\r\n                            onChange={(e) =>\r\n                              setInit(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                          <div className=\"input-group-append\">\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              role=\"button\"\r\n                              onClick={(e) => _handleAddInit(e)}\r\n                            >\r\n                              Add Initials\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-outline-primary mb-3\"\r\n                          onClick={() => _handleUsers()}\r\n                        >\r\n                          Users\r\n                        </button>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-4 card_height_100 mb_20\">\r\n                  <div className=\"white_card\">\r\n                    <div className=\"white_card_body p-0\">\r\n                      <div className=\"card_container\">\r\n                        <div className=\"white_box\">\r\n                          <div className=\"\">\r\n                            <h4\r\n                              style={{\r\n                                justifyContent: \"center\",\r\n                                alignItems: \"center\",\r\n                                display: \"flex\",\r\n                              }}\r\n                            >\r\n                              {props.user.FIRSTNAME} {props.user.LASTNAME}\r\n                            </h4>\r\n                            <div\r\n                              style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"center\",\r\n                                alignItems: \"center\",\r\n                                flexDirection: \"column\",\r\n                              }}\r\n                            >\r\n                              <div> {props.user.EMAIL}</div>\r\n                              <div> {props.user.PHONE}</div>\r\n                              <div> {props.user.ROLE}</div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (redirect === \"logout\") {\r\n    return <LoadingPage type=\"login\" />;\r\n  }\r\n}\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\inventory\\index.js",["258","259"],"import { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport ItemCard from \"../component/itemCard\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport InvDetails from \"../others/invDetails\";\r\n\r\nexport default function Inventory(props) {\r\n  const [ndata, setData] = useState([]);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [mredirect, setmRedirect] = useState(\"inventory\");\r\n  const [data, setdata] = useState({});\r\n\r\n  const assets = props.assets;\r\n\r\n  useEffect(() => {\r\n    group();\r\n  }, []);\r\n\r\n  // handling sorting\r\n  const group = () => {\r\n    let newArr = [];\r\n    assets.forEach((item) => {\r\n      if (newArr.some((e) => e.ASSETTYPE === item.ASSETTYPE.split(\"-\")[0])) {\r\n        newArr.map((e) => {\r\n          if (e.ASSETTYPE === item.ASSETTYPE.split(\"-\")[0]) {\r\n            e.assetCount += 1;\r\n            let v = parseInt(e.value);\r\n            let V = parseInt(item.VALUE);\r\n            e.value = v + V;\r\n            if (item.STATUS === \"ACTIVE\") {\r\n              e.active += 1;\r\n            } else if (item.STATUS === \"IN-ACTIVE\") {\r\n              e.inActive += 1;\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        newArr.push({\r\n          ASSETTYPE: item.ASSETTYPE.split(\"-\")[0],\r\n          assetCount: 1,\r\n          active: item.STATUS === \"ACTIVE\" ? 1 : 0,\r\n          inActive: item.STATUS === \"IN-ACTIVE\" ? 1 : 0,\r\n          value: item.VALUE,\r\n        });\r\n      }\r\n    });\r\n    setData(newArr);\r\n  };\r\n\r\n  // handling search\r\n  const _handleSearch = (value) => {\r\n    let newArr = [];\r\n    if (value !== \"\") {\r\n      ndata.forEach((item) => {\r\n        if (item.ASSETTYPE.toLocaleUpperCase().includes(value.toUpperCase())) {\r\n          newArr.push(item);\r\n        }\r\n      });\r\n      setData(newArr);\r\n    } else {\r\n      group();\r\n    }\r\n  };\r\n  // handling redirect\r\n  const _clicked = (data) => {\r\n    setdata(data);\r\n    setRedirect(true);\r\n  };\r\n\r\n  const _handleBack = () => {\r\n    setdata({});\r\n    setRedirect(false);\r\n  };\r\n\r\n  if (mredirect === \"inventory\") {\r\n    return (\r\n      <div>\r\n        <PageTitle\r\n          title=\"Inventory\"\r\n          createAsset={props.onCreate}\r\n          onSettingsClicked={() => setmRedirect(\"settings\")}\r\n        />\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 card_height_100\">\r\n            <div className=\"white_card mb_20\">\r\n              {redirect ? (\r\n                <div className=\"white_card_body\">\r\n                  <InvDetails data={data} onBack={_handleBack} />\r\n                </div>\r\n              ) : (\r\n                <div className=\"white_card_body\">\r\n                  <div>\r\n                    <div className=\"form-group mb-0\">\r\n                      <input\r\n                        type=\"Search\"\r\n                        className=\"form-control\"\r\n                        name=\"inputSearch\"\r\n                        id=\"inputSearch\"\r\n                        placeholder=\"Find Asset by name\"\r\n                        onChange={(e) => _handleSearch(e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    {ndata.length === 0 ? (\r\n                      <span>No Data Found</span>\r\n                    ) : (\r\n                      ndata.map((item, index) => {\r\n                        return (\r\n                          <ItemCard\r\n                            clicked={_clicked}\r\n                            title=\"inventory\"\r\n                            data={item}\r\n                            key={index}\r\n                          />\r\n                        );\r\n                      })\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Redirect to=\"/main/settings\" />;\r\n  }\r\n}\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\users.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\addAsset.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\assetDetails.js",["260"],"import React, { useRef, useState } from \"react\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport Loaders from \"../component/loaders/round\";\r\nimport Notifications from \"../component/notifications\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport CreReport from \"./createReport\";\r\nimport { PrintQrCode } from \"../funtions/prints/printQrCode\";\r\nimport { PrintAsset } from \"../funtions/prints/printAsset\";\r\n\r\nexport default function AssetDetails(props) {\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [creReport, setCreReport] = useState(false);\r\n  const [report, setReport] = useState({});\r\n  const [edit, setEdit] = useState(false);\r\n  const [editStatus, setEditStatus] = useState(false);\r\n  const [editCondition, setEditCondition] = useState(false);\r\n  const [tran, setTrans] = useState(\"\");\r\n  const [showNoti, setShowNoti] = useState(false);\r\n  const [condition, setCondition] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [showDelNoti, setShowDel] = useState(false);\r\n  const [status, setStatus] = useState(\"\");\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [errType, setErrType] = useState(\"\");\r\n\r\n  const loading = props.loading;\r\n  let item = props.data;\r\n  const departments = props.departments;\r\n  const user = props.user;\r\n\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  const _handleLoading = () => {\r\n    props.stopLoading();\r\n  };\r\n\r\n  const secondRef = useRef();\r\n  const handlePrintAss = useReactToPrint({\r\n    content: () => secondRef.current,\r\n  });\r\n\r\n  const _handleAction = (type) => {\r\n    if (type === \"close\" || type === \"clicked\") {\r\n      setShowNoti(false);\r\n      setShowDel(false);\r\n    } else {\r\n      // handle delete\r\n      props.onDelete(item._id);\r\n    }\r\n  };\r\n\r\n  const _handleDel = () => {\r\n    if (user.ROLE === \"CLARK\" || user.ROLE === \"CEO\") {\r\n      setErrType(\"danger\");\r\n      setMsg(\"You are not authorised to view this page!\");\r\n      showNoti(true);\r\n      return false;\r\n    } else {\r\n      setShowDel(true);\r\n    }\r\n  };\r\n\r\n  const _handleSave = async (check) => {\r\n    if (check === \"d\") {\r\n      if (department === \"\") {\r\n        setMsg(\"Field is required!\");\r\n        setErrType(\"danger\");\r\n        setShowNoti(true);\r\n      } else {\r\n        const data = {\r\n          serialNumber: item.SERIALNUMBER,\r\n          assetType: item.ASSETTYPE,\r\n          brand: item.BRAND,\r\n          department: department,\r\n          condition: item.CONDITION,\r\n          status: item.STATUS,\r\n          value: item.VALUE,\r\n          tran: item.TRANSFEREDTO,\r\n        };\r\n        await props.onEditAsset(data);\r\n      }\r\n    } else if (check === \"c\") {\r\n      if (condition === \"\") {\r\n        setMsg(\"Field is required!\");\r\n        setErrType(\"danger\");\r\n        setShowNoti(true);\r\n      } else {\r\n        if (condition === \"TRANSFERED\") {\r\n          if (tran === \"\") {\r\n            setMsg(\"Please provide where item is transfered to!\");\r\n            setErrType(\"danger\");\r\n            setShowNoti(true);\r\n          } else {\r\n            const data = {\r\n              serialNumber: item.SERIALNUMBER,\r\n              assetType: item.ASSETTYPE,\r\n              brand: item.BRAND,\r\n              department: item.DEPARTMENT,\r\n              condition: condition,\r\n              status: item.STATUS,\r\n              value: item.VALUE,\r\n              tran: tran,\r\n            };\r\n            props.onEditAsset(data);\r\n          }\r\n        } else {\r\n          const data = {\r\n            serialNumber: item.SERIALNUMBER,\r\n            assetType: item.ASSETTYPE,\r\n            brand: item.BRAND,\r\n            department: item.DEPARTMENT,\r\n            condition: condition,\r\n            status: item.STATUS,\r\n            value: item.VALUE,\r\n            tran: item.TRANSFEREDTO,\r\n          };\r\n          props.onEditAsset(data);\r\n        }\r\n      }\r\n    } else {\r\n      if (status === \"\") {\r\n        setMsg(\"Field is required!\");\r\n        setErrType(\"danger\");\r\n        setShowNoti(true);\r\n      } else {\r\n        const data = {\r\n          serialNumber: item.SERIALNUMBER,\r\n          assetType: item.ASSETTYPE,\r\n          brand: item.BRAND,\r\n          department: item.DEPARTMENT,\r\n          condition: item.CONDITION,\r\n          status: status,\r\n          value: item.VALUE,\r\n          tran: item.TRANSFEREDTO,\r\n        };\r\n        props.onEditAsset(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  const _handleAddRep = async (data) => {\r\n    await props.onAddRep(data);\r\n    setCreReport(false);\r\n  };\r\n\r\n  const _handleRedirect = () => {\r\n    if (user.ROLE === \"CLARK\" || user.ROLE === \"CEO\") {\r\n      setErrType(\"danger\");\r\n      setMsg(\"You are not authorised to view this page!\");\r\n      showNoti(true);\r\n      return false;\r\n    } else {\r\n      setRedirect(true);\r\n    }\r\n  };\r\n\r\n  if (creReport) {\r\n    return (\r\n      <CreReport\r\n        back={() => setCreReport(false)}\r\n        data={report}\r\n        loading={loading}\r\n        user={user}\r\n        onAddRep={_handleAddRep}\r\n        type={props.type}\r\n        msg={props.msg}\r\n        notify={props.notify}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <PageTitle title=\"Asset Details\" onBack={props.goBack} />\r\n        <div className=\"row \">\r\n          <PrintQrCode ref={componentRef} qr={item.QR} />\r\n          <PrintAsset ref={secondRef} item={item} />\r\n          <div className=\"col-12 QA_section\">\r\n            <div className=\"card QA_table \">\r\n              <div className=\"card-header\">\r\n                Asset Serial Number: <strong>{item.SERIALNUMBER}</strong>\r\n                <span className=\"float-right\">\r\n                  {redirect ? (\r\n                    <span></span>\r\n                  ) : (\r\n                    <span\r\n                      type=\"button\"\r\n                      role=\"button\"\r\n                      style={{\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                      onClick={() => {\r\n                        handlePrintAss();\r\n                      }}\r\n                    >\r\n                      <i title=\"print inventory\" className=\"fa fa-print\"></i>\r\n                    </span>\r\n                  )}\r\n                </span>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                {showNoti ? (\r\n                  <Notifications\r\n                    type={errType}\r\n                    message={msg}\r\n                    onAction={_handleAction}\r\n                  />\r\n                ) : (\r\n                  <span></span>\r\n                )}\r\n                {redirect ? (\r\n                  <div className=\"row centered\">\r\n                    <div className=\"col-lg-6 align-self-center\">\r\n                      <div className=\"input-group mb-3\">\r\n                        {edit ? (\r\n                          <select\r\n                            className=\"custom-select\"\r\n                            onChange={(e) =>\r\n                              setDepartment(e.target.value.toUpperCase())\r\n                            }\r\n                          >\r\n                            <option>Choose...</option>\r\n                            {departments.map((item, index) => {\r\n                              return (\r\n                                <option value={item.type} key={index}>\r\n                                  {item.type}\r\n                                </option>\r\n                              );\r\n                            })}\r\n                          </select>\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            placeholder={item.DEPARTMENT}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n                        <div className=\"input-group-append\">\r\n                          {edit ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  _handleLoading();\r\n                                  setEdit(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleSave(\"d\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              onClick={() => setEdit(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"input-group mb-3\">\r\n                        {editCondition ? (\r\n                          <select\r\n                            className=\"custom-select\"\r\n                            onChange={(e) =>\r\n                              setCondition(e.target.value.toUpperCase())\r\n                            }\r\n                          >\r\n                            <option>Choose...</option>\r\n                            <option value=\"new\">NEW</option>\r\n                            <option value=\"old\">OLD</option>\r\n                            <option value=\"damaged\">DAMAGED</option>\r\n                            <option value=\"repairs\">REPAIRS</option>\r\n                            <option value=\"transfered\">TRANSFERED</option>\r\n                          </select>\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            placeholder={item.CONDITION}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n                        <div className=\"input-group-append\">\r\n                          {editCondition ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  _handleLoading();\r\n                                  setEditCondition(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleSave(\"c\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEditCondition(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      {condition === \"TRANSFERED\" ? (\r\n                        <div className=\"input-group mb-3\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Tranfered to\"\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setTrans(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                        </div>\r\n                      ) : (\r\n                        <span></span>\r\n                      )}\r\n                      <div className=\"input-group mb-3\">\r\n                        {editStatus ? (\r\n                          <select\r\n                            className=\"custom-select\"\r\n                            onChange={(e) =>\r\n                              setStatus(e.target.value.toUpperCase())\r\n                            }\r\n                          >\r\n                            <option>Choose status...</option>\r\n                            <option value=\"active\">ACTIVE</option>\r\n                            <option value=\"in-active\">IN-ACTIVE</option>\r\n                          </select>\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            placeholder={item.STATUS}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n                        <div className=\"input-group-append\">\r\n                          {editStatus ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  _handleLoading();\r\n                                  setEditStatus(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleSave(\"s\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEditStatus(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary mr-3\"\r\n                        onClick={() => setRedirect(false)}\r\n                      >\r\n                        Cancel\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    {showDelNoti ? (\r\n                      <Notifications\r\n                        type=\"warning\"\r\n                        message=\"Proceed To Delete\"\r\n                        onAction={_handleAction}\r\n                      />\r\n                    ) : (\r\n                      <span></span>\r\n                    )}\r\n                    <div className=\"row\">\r\n                      <div className=\"col-lg-6 align-self-center\">\r\n                        <img\r\n                          src={item.QR}\r\n                          alt=\"qr-code\"\r\n                          className=\"mx-auto d-block sm_w_100\"\r\n                          height={300}\r\n                        />\r\n                      </div>\r\n                      {/*end col*/}\r\n                      <div className=\"col-lg-6 align-self-center\">\r\n                        <div className=\"single-pro-detail\">\r\n                          <p className=\"mb-1\">Asset Details</p>\r\n                          <div className=\"custom-border mb-3\" />\r\n                          <h4 className=\"pro-title\">\r\n                            <span>Asset Type:</span> {item.ASSETTYPE}\r\n                          </h4>\r\n                          <p className=\"text-muted mb-0\">\r\n                            <span>Serial Number:</span>{\" \"}\r\n                            <strong>{item.SERIALNUMBER}</strong>\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Department: {item.DEPARTMENT}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Condition : {item.CONDITION}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Brand : {item.BRAND}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Value : {item.VALUE}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Status : {item.STATUS}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Transfered :{\" \"}\r\n                            {item.CONDITION === \"TRANSFERED\" ? \"YES\" : \"NO\"}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Transfered To :{\" \"}\r\n                            {item.CONDITION === \"TRANSFERED\"\r\n                              ? item.TRANSFEREDTO\r\n                              : \"\"}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Purchased / Donated : {item.DONATEDORPURCHASED}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Donated By :{\" \"}\r\n                            {item.DONATEDORPURCHASED === \"DONATED\"\r\n                              ? item.DONATEDBY\r\n                              : \"\"}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Date Purchased / Donated :{\" \"}\r\n                            {item.DATEOFPURCHASEORDONATED}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Date Added :{\" \"}\r\n                            {item.createdAt !== undefined ? (\r\n                              item.createdAt.split(\"T\")[0]\r\n                            ) : (\r\n                              <></>\r\n                            )}\r\n                          </p>\r\n                          <div className=\"quantity mt-2\">\r\n                            <span\r\n                              type=\"button\"\r\n                              role=\"button\"\r\n                              className=\"btn green_bg text-white px-4 d-inline-block \"\r\n                              onClick={handlePrint}\r\n                            >\r\n                              <i className=\"fa fa-print mr-2\" />\r\n                              Print QR Code\r\n                            </span>\r\n                            <span\r\n                              type=\"button\"\r\n                              role=\"button\"\r\n                              className=\"btn green_bg text-white px-4 d-inline-block ml-2\"\r\n                              onClick={() => _handleRedirect()}\r\n                            >\r\n                              <i className=\"fa fa-edit\" />\r\n                            </span>\r\n                            {loading ? (\r\n                              <span className=\"btn green_bg text-white px-4 d-inline-block ml-2\">\r\n                                <Loaders loading={loading} />\r\n                              </span>\r\n                            ) : (\r\n                              <span\r\n                                type=\"button\"\r\n                                role=\"button\"\r\n                                className=\"btn green_bg text-white px-4 d-inline-block ml-2\"\r\n                                onClick={() => {\r\n                                  _handleDel();\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-trash\" />\r\n                              </span>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      {/*end col*/}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\reportDetails.js",[],["261","262"],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\invDetails.js",["263"],"import React, { useRef, useState } from \"react\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { PrintInvDetails } from \"../funtions/prints/invDetailsPrint\";\r\n\r\nexport default function InvDetails(props) {\r\n  const data = props.data;\r\n\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <PrintInvDetails ref={componentRef} data={data} />\r\n      <div className=\"row \">\r\n        <div className=\"col-12 QA_section\">\r\n          <div className=\"card QA_table \">\r\n            <div className=\"card-header\">\r\n              Inventory Details\r\n              <span className=\"float-right\">\r\n                <span\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                >\r\n                  ASSETS REG\r\n                </span>\r\n                <span\r\n                  type=\"button\"\r\n                  role=\"button\"\r\n                  onClick={() => props.onBack()}\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                >\r\n                  <i className=\"fa fa-arrow-left\"></i>\r\n                </span>\r\n                <span\r\n                  type=\"button\"\r\n                  role=\"button\"\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                  onClick={handlePrint}\r\n                >\r\n                  <i title=\"print inventory\" className=\"fa fa-print\"></i>\r\n                </span>\r\n              </span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">Asset Type</div>\r\n                <div className=\"col-6\">{data.ASSETTYPE}</div>\r\n                <div className=\"col-6\">Total Numer Of Assets</div>\r\n                <div className=\"col-6\">{data.assetCount}</div>\r\n                <div className=\"col-6\">Total Numer Of Active Assets</div>\r\n                <div className=\"col-6\">{data.active}</div>\r\n                <div className=\"col-6\">Total Numer Of In-Active Assets</div>\r\n                <div className=\"col-6\">{data.inActive}</div>\r\n                <div className=\"col-6\">Total Value Of Assets</div>\r\n                <div className=\"col-6\">{data.value}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\addUser.js",["264"],"import { useState } from \"react\";\r\nimport Loaders from \"../component/loaders/round\";\r\nimport Notifications from \"../component/notifications\";\r\nimport PageTitle from \"../component/pageTitle\";\r\n\r\nexport default function AddUser(props) {\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setMail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [role, setRole] = useState(\"\");\r\n\r\n  const _handleSaveUser = (event) => {\r\n    event.preventDefault();\r\n    const data = {\r\n      firstName,\r\n      lastName,\r\n      phone,\r\n      email,\r\n      password,\r\n      role,\r\n    };\r\n    props.onSaveUser(data);\r\n  };\r\n\r\n  const _handleClose = () => {\r\n    props.close();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PageTitle title=\"Users\" subTitle=\"addUser\" goBack={props.back} />\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-12 card_height_100\">\r\n          {props.notify ? (\r\n            <Notifications\r\n              type={props.type}\r\n              message={props.msg}\r\n              onAction={_handleClose}\r\n            />\r\n          ) : (\r\n            <span></span>\r\n          )}\r\n          <div className=\"white_card mb_10\">\r\n            <div className=\"white_card_body row\">\r\n              <div className=\"col-md-6\">\r\n                <div className=\"white_box\">\r\n                  <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                      <span className=\"input-group-text\" id=\"basic-addon3\">\r\n                        First Name:\r\n                      </span>\r\n                    </div>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"basic-url\"\r\n                      aria-describedby=\"basic-addon3\"\r\n                      onChange={(e) =>\r\n                        setFirstName(e.target.value.toUpperCase())\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                      <span className=\"input-group-text\" id=\"basic-addon3\">\r\n                        Last Name:\r\n                      </span>\r\n                    </div>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"basic-url\"\r\n                      aria-describedby=\"basic-addon3\"\r\n                      onChange={(e) =>\r\n                        setLastName(e.target.value.toUpperCase())\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                      <span className=\"input-group-text\" id=\"basic-addon3\">\r\n                        Phone :\r\n                      </span>\r\n                    </div>\r\n                    <input\r\n                      type=\"number\"\r\n                      className=\"form-control\"\r\n                      id=\"basic-url\"\r\n                      aria-describedby=\"basic-addon3\"\r\n                      onChange={(e) => setPhone(e.target.value)}\r\n                    />\r\n                  </div>\r\n                  {props.loading ? (\r\n                    <span class=\"btn btn-primary\">\r\n                      <Loaders loading={props.loading} />\r\n                    </span>\r\n                  ) : (\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"btn btn-primary\"\r\n                      onClick={_handleSaveUser}\r\n                    >\r\n                      Save User\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <div className=\"white_box\">\r\n                  <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                      <span className=\"input-group-text\" id=\"basic-addon3\">\r\n                        Email:\r\n                      </span>\r\n                    </div>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"basic-url\"\r\n                      aria-describedby=\"basic-addon3\"\r\n                      onChange={(e) => setMail(e.target.value.toUpperCase())}\r\n                    />\r\n                  </div>\r\n                  <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                      <span className=\"input-group-text\" id=\"basic-addon3\">\r\n                        Password:\r\n                      </span>\r\n                    </div>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"basic-url\"\r\n                      aria-describedby=\"basic-addon3\"\r\n                      type=\"password\"\r\n                      onChange={(e) =>\r\n                        setPassword(e.target.value.toUpperCase())\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                      <label\r\n                        className=\"input-group-text\"\r\n                        htmlFor=\"inputGroupSelect01\"\r\n                      >\r\n                        Role\r\n                      </label>\r\n                    </div>\r\n                    <select\r\n                      className=\"custom-select\"\r\n                      id=\"inputGroupSelect01\"\r\n                      onChange={(e) => setRole(e.target.value.toUpperCase())}\r\n                    >\r\n                      <option>Select role.....</option>\r\n                      <option value={\"ADMINISTRATOR\"}>ADMINISTRATOR</option>\r\n                      <option value={\"CLARK\"}>\r\n                        DATA ENTRY CLARCK\r\n                      </option>\r\n                      <option value={\"CEO\"}>CEO</option>\r\n                      <option value={\"ASSETS MANAGER\"}>ASSETS MANAGER</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\details.js",["265","266","267","268","269","270","271","272","273"],"import { useState } from \"react\";\r\nimport Loaders from \"../component/loaders/round\";\r\nimport Notifications from \"../component/notifications\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport \"../main.css\";\r\n\r\nexport default function Details(props) {\r\n  const [edit, setEdit] = useState(false);\r\n  const [editL, setEditL] = useState(false);\r\n  const [editM, setEditM] = useState(false);\r\n  const [editP, setEditP] = useState(false);\r\n  const [editR, setEditR] = useState(false);\r\n  const [showNoti, setShownoti] = useState(false);\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [email, setMail] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [role, setRole] = useState(\"\");\r\n\r\n  const user = props.user;\r\n  const loading = props.loading;\r\n  const notify = props.notify;\r\n  const msg = props.message;\r\n  const type = props.type;\r\n\r\n  const _back = () => {\r\n    props.back();\r\n  };\r\n\r\n  const _handdleNoti = (check) => {\r\n    if (check === \"delete\") {\r\n      props.delete(user._id);\r\n    } else {\r\n      setShownoti(false);\r\n      props.changeState();\r\n    }\r\n  };\r\n\r\n  const _handleEdit = async (check) => {\r\n    if (check === \"f\") {\r\n      if (firstName === \"\") {\r\n        props.changeState();\r\n        return false;\r\n      } else {\r\n        const data = {\r\n          id: user._id,\r\n          firstName: firstName,\r\n          lastName: user.LASTNAME,\r\n          email: user.EMAIL,\r\n          phone: user.PHONE,\r\n          role: user.ROLE,\r\n          password: user.PASSWORD,\r\n        };\r\n        props.editUser(data);\r\n      }\r\n    } else if (check === \"l\") {\r\n      if (lastName === \"\") {\r\n        props.changeState();\r\n        return false;\r\n      } else {\r\n        const data = {\r\n          id: user._id,\r\n          firstName: user.FIRSTNAME,\r\n          lastName: lastName,\r\n          email: user.EMAIL,\r\n          phone: user.PHONE,\r\n          role: user.ROLE,\r\n          password: user.PASSWORD,\r\n        };\r\n        props.editUser(data);\r\n      }\r\n    } else if (check === \"e\") {\r\n      if (email === \"\") {\r\n        props.changeState();\r\n        return false;\r\n      } else {\r\n        const data = {\r\n          id: user._id,\r\n          firstName: user.FIRSTNAME,\r\n          lastName: user.LASTNAME,\r\n          email: email,\r\n          phone: user.PHONE,\r\n          role: user.ROLE,\r\n          password: user.PASSWORD,\r\n        };\r\n        props.editUser(data);\r\n      }\r\n    } else if (check === \"p\") {\r\n      if (phone === \"\") {\r\n        props.changeState();\r\n        return false;\r\n      } else {\r\n        const data = {\r\n          id: user._id,\r\n          firstName: user.FIRSTNAME,\r\n          lastName: user.LASTNAME,\r\n          email: user.EMAIL,\r\n          phone: phone,\r\n          role: user.ROLE,\r\n          password: user.PASSWORD,\r\n        };\r\n        props.editUser(data);\r\n      }\r\n    } else if (check === \"r\") {\r\n      if (role === \"\") {\r\n        props.changeState();\r\n        return false;\r\n      } else {\r\n        const data = {\r\n          id: user._id,\r\n          firstName: user.FIRSTNAME,\r\n          lastName: user.LASTNAME,\r\n          email: user.EMAIL,\r\n          phone: user.PHONE,\r\n          role: role,\r\n          password: user.PASSWORD,\r\n        };\r\n        props.editUser(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PageTitle title=\"Users\" subTitle=\"user\" goBack={_back} />\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-12 card_height_100\">\r\n          <div className=\"white_card \">\r\n            <div className=\"white_card_body row\">\r\n              <div className=\"col-md-6\">\r\n                {showNoti || notify ? (\r\n                  <Notifications\r\n                    type={showNoti ? \"warning\" : type}\r\n                    message={showNoti ? \"Are you sure you want to delete\" : msg}\r\n                    onAction={_handdleNoti}\r\n                  />\r\n                ) : (\r\n                  <span></span>\r\n                )}\r\n                <div className=\"white_box\">\r\n                  <div className=\"profile-cart_2\">\r\n                    <div className=\"images\">\r\n                      <i\r\n                        className=\"fas fa-user-alt myimg\"\r\n                        style={{ color: \"GrayText\", fontSize: 100 }}\r\n                      ></i>\r\n                    </div>\r\n                    <h1>\r\n                      <small>{user.FIRSTNAME + \" \" + user.LASTNAME}</small>\r\n                    </h1>\r\n                    <p></p>\r\n                    <div\r\n                      className=\"social-area\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        marginTop: 10,\r\n                      }}\r\n                    >\r\n                      {loading ? (\r\n                        <span class=\"btn btn-outline-primary mb-2\">\r\n                          <Loaders loading={loading} />\r\n                        </span>\r\n                      ) : (\r\n                        <button\r\n                          type=\"button\"\r\n                          class=\"btn btn-outline-primary mb-2\"\r\n                          onClick={() => setShownoti(true)}\r\n                        >\r\n                          <i class=\"fa fa-trash\"></i>\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <div className=\"white_box\">\r\n                  <div className=\"profile-cart_0 p-3\">\r\n                    <div className=\"centered\">\r\n                      <div className=\"input-group mb-3\">\r\n                        {edit ? (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.FIRSTNAME}\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setFirstName(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.FIRSTNAME}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n\r\n                        <div className=\"input-group-append\">\r\n                          {edit ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  props.stopLoading();\r\n                                  setEdit(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleEdit(\"f\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEdit(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"input-group mb-3\">\r\n                        {editL ? (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.LASTNAME}\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setLastName(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.LASTNAME}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n\r\n                        <div className=\"input-group-append\">\r\n                          {editL ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  props.stopLoading();\r\n                                  setEditL(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleEdit(\"l\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEditL(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"input-group mb-3\">\r\n                        {editM ? (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.EMAIL}\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setMail(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.EMAIL}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n                        <div className=\"input-group-append\">\r\n                          {editM ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  props.stopLoading();\r\n                                  setEditM(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleEdit(\"e\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEditM(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"input-group mb-3\">\r\n                        {editP ? (\r\n                          <input\r\n                            type=\"number\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.PHONE}\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setPhone(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.PHONE}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n                        <div className=\"input-group-append\">\r\n                          {editP ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  props.stopLoading();\r\n                                  setEditP(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleEdit(\"p\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEditP(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"input-group mb-3\">\r\n                        {editR ? (\r\n                          <select\r\n                            className=\"form-control\"\r\n                            onChange={(e) =>\r\n                              setRole(e.target.value.toUpperCase())\r\n                            }\r\n                          >\r\n                            <option>Select role.....</option>\r\n                            <option value={\"ADMINISTRATOR\"}>\r\n                              ADMINISTRATOR\r\n                            </option>\r\n                            <option value={\"CLARK\"}>DATA ENTRY CLARCK</option>\r\n                            <option value={\"CEO\"}>CEO</option>\r\n                            <option value={\"ASSETs MANAGER\"}>\r\n                              ASSETs MANAGER\r\n                            </option>\r\n                          </select>\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.ROLE}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n                        <div className=\"input-group-append\">\r\n                          {editR ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  props.stopLoading();\r\n                                  setEditR(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleEdit(\"r\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEditR(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\createReport.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\pageTitle.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\chart.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\itemCard.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\index.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\loaders\\round.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\deps\\index.js",["274","275"],"import { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ItemCard from \"../component/itemCard\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport DepartDetails from \"../others/departDetails\";\r\n\r\nexport default function Departments(props) {\r\n  const [mredirect, setmRedirect] = useState(\"departments\");\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [assets, setAssets] = useState([]);\r\n  const [asset, setAsset] = useState({});\r\n\r\n  const data = props.assets;\r\n\r\n  useEffect(() => {\r\n    group();\r\n  }, []);\r\n\r\n  const group = () => {\r\n    let newArr = [];\r\n    data.forEach((item) => {\r\n      if (newArr.some((e) => e.department === item.DEPARTMENT)) {\r\n        newArr.map((e) => {\r\n          if (e.department === item.DEPARTMENT) {\r\n            e.assetCount += 1;\r\n            e.assets.push(item);\r\n          }\r\n        });\r\n      } else {\r\n        newArr.push({\r\n          department: item.DEPARTMENT,\r\n          assetCount: 1,\r\n          assets: [item],\r\n        });\r\n      }\r\n    });\r\n    setAssets(newArr);\r\n  };\r\n\r\n  const _clicked = (data) => {\r\n    setAsset(data);\r\n    setRedirect(true);\r\n  };\r\n\r\n  if (mredirect === \"departments\") {\r\n    return (\r\n      <div>\r\n        <PageTitle\r\n          title=\"Departments\"\r\n          createAsset={props.onCreate}\r\n          onSettingsClicked={() => setmRedirect(\"settings\")}\r\n        />\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 card_height_100\">\r\n            <div className=\"white_card mb_20\">\r\n              {redirect ? (\r\n                <div className=\"white_card_body\">\r\n                  <DepartDetails\r\n                    data={asset}\r\n                    onBack={() => setRedirect(false)}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <div className=\"white_card_body\">\r\n                  <div className=\"row\">\r\n                    {assets.length === 0 ? (\r\n                      <span>No Data Found</span>\r\n                    ) : (\r\n                      assets.map((item, index) => {\r\n                        return (\r\n                          <ItemCard\r\n                            clicked={_clicked}\r\n                            title=\"departments\"\r\n                            data={item}\r\n                            key={index}\r\n                          />\r\n                        );\r\n                      })\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Redirect to=\"/main/settings\" />;\r\n  }\r\n}\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\others\\departDetails.js",["276"],"import React, { useRef, useState } from \"react\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { PrintAllAssets } from \"../funtions/prints/allAssets\";\r\nimport { PrintDepDetails } from \"../funtions/prints/printDepDetails\";\r\n\r\nexport default function DepartDetails(props) {\r\n  const data = props.data;\r\n\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  const secondRef = useRef();\r\n  const handlePrintAll = useReactToPrint({\r\n    content: () => secondRef.current,\r\n  });\r\n\r\n  const _handleActiveAssets = () => {\r\n    var active = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.STATUS === \"ACTIVE\") {\r\n        active += 1;\r\n      }\r\n    });\r\n    return active;\r\n  };\r\n\r\n  const _handleInActiveAssets = () => {\r\n    var inActive = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.STATUS === \"IN-ACTIVE\") {\r\n        inActive += 1;\r\n      }\r\n    });\r\n    return inActive;\r\n  };\r\n\r\n  const _handleNewAssets = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.CONDITION === \"NEW\") {\r\n        res += 1;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleOldAssets = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.CONDITION === \"OLD\") {\r\n        res += 1;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleDamagedAssets = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.CONDITION === \"DAMAGED\") {\r\n        res += 1;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleRepairsAssets = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.CONDITION === \"REPAIRS\") {\r\n        res += 1;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleAssetTypes = () => {\r\n    var res = [];\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (!res.includes(item.ASSETTYPE)) {\r\n        res.push(item.ASSETTYPE);\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleDonated = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.DONATEDORPURCHASED === \"DONATED\") {\r\n        res += 1;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handlePurchased = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.DONATEDORPURCHASED === \"PURCHASED\") {\r\n        res += 1;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleAssetsValue = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      res = res + parseInt(item.VALUE);\r\n    });\r\n    return res;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PrintDepDetails\r\n        ref={componentRef}\r\n        department={data.department}\r\n        assetCount={data.assetCount}\r\n        active={_handleActiveAssets}\r\n        in_active={_handleInActiveAssets}\r\n        newAss={_handleNewAssets}\r\n        old={_handleOldAssets}\r\n        damaged={_handleDamagedAssets}\r\n        repairs={_handleRepairsAssets}\r\n        types={_handleAssetTypes}\r\n        donated={_handleDonated}\r\n        purchased={_handlePurchased}\r\n        value={_handleAssetsValue}\r\n      />\r\n      <PrintAllAssets\r\n        ref={secondRef}\r\n        assets={data.assets}\r\n        value={_handleAssetsValue}\r\n      />\r\n      <div className=\"row \">\r\n        <div className=\"col-12 QA_section\">\r\n          <div className=\"card QA_table \">\r\n            <div className=\"card-header\">\r\n              Department: <strong>{data.department}</strong>\r\n              <span className=\"float-right\">\r\n                <span\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                >\r\n                  ASSETS REG\r\n                </span>\r\n                <span\r\n                  type=\"button\"\r\n                  role=\"button\"\r\n                  onClick={() => props.onBack()}\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                >\r\n                  <i className=\"fa fa-arrow-left\"></i>\r\n                </span>\r\n                <span\r\n                  type=\"button\"\r\n                  role=\"button\"\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                  onClick={handlePrint}\r\n                >\r\n                  <i title=\"print inventory\" className=\"fa fa-print\"></i>\r\n                </span>\r\n                <span\r\n                  type=\"button\"\r\n                  role=\"button\"\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                  onClick={handlePrintAll}\r\n                >\r\n                  <i\r\n                    title=\"print all assets\"\r\n                    className=\"fa fa-angle-double-down\"\r\n                  ></i>\r\n                </span>\r\n              </span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <span className=\"row\" style={{ width: \"100%\", display: \"flex\" }}>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Department Name:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {data.department}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {data.assetCount}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of Active Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleActiveAssets()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of In-Active Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleInActiveAssets()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of New Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleNewAssets()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of Old Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleOldAssets()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of Damaged Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleDamagedAssets()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of Assets At Repairs:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleRepairsAssets()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Number Of Donated Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleDonated()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Number Of Purchased Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handlePurchased()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Value Of Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleAssetsValue()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Types Of Assets In The Department:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleAssetTypes().map((item, index) => {\r\n                    return (\r\n                      <span\r\n                        style={{\r\n                          fontSize: 15,\r\n                          fontWeight: \"bold\",\r\n                          marginRight: \"15px\",\r\n                        }}\r\n                        key={index}\r\n                      >\r\n                        {item},\r\n                      </span>\r\n                    );\r\n                  })}\r\n                </span>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\print.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\prints\\allAssets.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\tables\\table.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\component\\tables\\printTables.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\prints\\printQrCode.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\prints\\printAsset.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\prints\\invDetailsPrint.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\prints\\printDepDetails.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\funtions\\prints\\printReport.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\help\\index.js",[],"C:\\Users\\ILYASEEN19\\Documents\\projects\\assets_rig\\src\\main\\app\\faq\\index.js",[],{"ruleId":"277","severity":1,"message":"278","line":5,"column":8,"nodeType":"279","messageId":"280","endLine":5,"endColumn":14},{"ruleId":"277","severity":1,"message":"281","line":9,"column":10,"nodeType":"279","messageId":"280","endLine":9,"endColumn":15},{"ruleId":"277","severity":1,"message":"282","line":10,"column":10,"nodeType":"279","messageId":"280","endLine":10,"endColumn":20},{"ruleId":"277","severity":1,"message":"283","line":10,"column":22,"nodeType":"279","messageId":"280","endLine":10,"endColumn":35},{"ruleId":"277","severity":1,"message":"284","line":11,"column":10,"nodeType":"279","messageId":"280","endLine":11,"endColumn":13},{"ruleId":"285","severity":1,"message":"286","line":103,"column":15,"nodeType":"287","endLine":106,"endColumn":17},{"ruleId":"288","severity":1,"message":"289","line":124,"column":17,"nodeType":"287","endLine":137,"endColumn":18},{"ruleId":"290","severity":1,"message":"291","line":129,"column":19,"nodeType":"292","endLine":129,"endColumn":32},{"ruleId":"285","severity":1,"message":"286","line":165,"column":15,"nodeType":"287","endLine":168,"endColumn":17},{"ruleId":"288","severity":1,"message":"289","line":195,"column":17,"nodeType":"287","endLine":208,"endColumn":18},{"ruleId":"290","severity":1,"message":"291","line":200,"column":19,"nodeType":"292","endLine":200,"endColumn":32},{"ruleId":"285","severity":1,"message":"286","line":11,"column":11,"nodeType":"287","endLine":14,"endColumn":13},{"ruleId":"285","severity":1,"message":"286","line":51,"column":11,"nodeType":"287","endLine":54,"endColumn":13},{"ruleId":"277","severity":1,"message":"293","line":22,"column":10,"nodeType":"279","messageId":"280","endLine":22,"endColumn":13},{"ruleId":"277","severity":1,"message":"294","line":22,"column":15,"nodeType":"279","messageId":"280","endLine":22,"endColumn":21},{"ruleId":"285","severity":1,"message":"286","line":25,"column":11,"nodeType":"287","endLine":28,"endColumn":13},{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","replacedBy":"298"},{"ruleId":"277","severity":1,"message":"299","line":6,"column":8,"nodeType":"279","messageId":"280","endLine":6,"endColumn":20},{"ruleId":"300","severity":1,"message":"301","line":218,"column":52,"nodeType":"302","messageId":"303","endLine":218,"endColumn":54},{"ruleId":"300","severity":1,"message":"301","line":239,"column":52,"nodeType":"302","messageId":"303","endLine":239,"endColumn":54},{"ruleId":"304","severity":1,"message":"305","line":8,"column":6,"nodeType":"306","endLine":8,"endColumn":8,"suggestions":"307"},{"ruleId":"304","severity":1,"message":"308","line":54,"column":6,"nodeType":"306","endLine":54,"endColumn":8,"suggestions":"309"},{"ruleId":"288","severity":1,"message":"289","line":204,"column":29,"nodeType":"287","endLine":209,"endColumn":30},{"ruleId":"288","severity":1,"message":"289","line":228,"column":29,"nodeType":"287","endLine":233,"endColumn":30},{"ruleId":"288","severity":1,"message":"289","line":252,"column":29,"nodeType":"287","endLine":257,"endColumn":30},{"ruleId":"304","severity":1,"message":"310","line":17,"column":6,"nodeType":"306","endLine":17,"endColumn":8,"suggestions":"311"},{"ruleId":"300","severity":1,"message":"312","line":24,"column":24,"nodeType":"302","messageId":"313","endLine":24,"endColumn":26},{"ruleId":"277","severity":1,"message":"314","line":13,"column":18,"nodeType":"279","messageId":"280","endLine":13,"endColumn":27},{"ruleId":"295","replacedBy":"315"},{"ruleId":"297","replacedBy":"316"},{"ruleId":"277","severity":1,"message":"317","line":1,"column":25,"nodeType":"279","messageId":"280","endLine":1,"endColumn":33},{"ruleId":"290","severity":1,"message":"291","line":137,"column":23,"nodeType":"292","messageId":"318","endLine":137,"endColumn":38},{"ruleId":"319","severity":1,"message":"320","line":184,"column":27,"nodeType":"287","endLine":195,"endColumn":29},{"ruleId":"319","severity":1,"message":"320","line":197,"column":27,"nodeType":"287","endLine":206,"endColumn":29},{"ruleId":"319","severity":1,"message":"320","line":252,"column":27,"nodeType":"287","endLine":263,"endColumn":29},{"ruleId":"319","severity":1,"message":"320","line":265,"column":27,"nodeType":"287","endLine":274,"endColumn":29},{"ruleId":"319","severity":1,"message":"320","line":320,"column":27,"nodeType":"287","endLine":331,"endColumn":29},{"ruleId":"319","severity":1,"message":"320","line":333,"column":27,"nodeType":"287","endLine":342,"endColumn":29},{"ruleId":"319","severity":1,"message":"320","line":387,"column":27,"nodeType":"287","endLine":398,"endColumn":29},{"ruleId":"319","severity":1,"message":"320","line":400,"column":27,"nodeType":"287","endLine":409,"endColumn":29},{"ruleId":"319","severity":1,"message":"320","line":471,"column":27,"nodeType":"287","endLine":480,"endColumn":29},{"ruleId":"304","severity":1,"message":"310","line":17,"column":6,"nodeType":"306","endLine":17,"endColumn":8,"suggestions":"321"},{"ruleId":"300","severity":1,"message":"312","line":23,"column":24,"nodeType":"302","messageId":"313","endLine":23,"endColumn":26},{"ruleId":"277","severity":1,"message":"317","line":1,"column":25,"nodeType":"279","messageId":"280","endLine":1,"endColumn":33},"no-unused-vars","'Modals' is defined but never used.","Identifier","unusedVar","'title' is assigned a value but never used.","'errMessage' is assigned a value but never used.","'setErrMessage' is assigned a value but never used.","'row' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'err' is assigned a value but never used.","'setErr' is assigned a value but never used.","no-native-reassign",["322"],"no-negated-in-lhs",["323"],"'_fetchAssets' is defined but never used.","array-callback-return","Array.prototype.reduce() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_move'. Either include it or remove the dependency array.","ArrayExpression",["324"],"React Hook useEffect has a missing dependency: 'paginatedArray'. Either include it or remove the dependency array.",["325"],"React Hook useEffect has a missing dependency: 'group'. Either include it or remove the dependency array.",["326"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","'setReport' is assigned a value but never used.",["322"],["323"],"'useState' is defined but never used.","noDuplicateProps","jsx-a11y/role-supports-aria-props","The attribute aria-checked is not supported by the role textbox. This role is implicit on the element input.",["327"],"no-global-assign","no-unsafe-negation",{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"332","fix":"334"},"Update the dependencies array to be: [_move]",{"range":"335","text":"336"},"Update the dependencies array to be: [paginatedArray]",{"range":"337","text":"338"},"Update the dependencies array to be: [group]",{"range":"339","text":"340"},{"range":"341","text":"340"},[217,219],"[_move]",[1617,1619],"[paginatedArray]",[549,551],"[group]",[566,568]]