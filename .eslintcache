[{"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\index.js":"1","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\App.js":"2","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\reportWebVitals.js":"3","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\auth\\login.js":"4","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\main.js":"5","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\data.js":"6","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\loaders\\loading.js":"7","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\index.js":"8","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\notifications.js":"9","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\aside.js":"10","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\inventory\\index.js":"11","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\reports\\index.js":"12","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\dashboard\\index.js":"13","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\settings\\index.js":"14","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\users.js":"15","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\addAsset.js":"16","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\assets\\index.js":"17","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\assetDetails.js":"18","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\help\\index.js":"19","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\deps\\index.js":"20","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\faq\\index.js":"21","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\branches\\index.js":"22","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\loaders\\elipses.js":"23","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\invDetails.js":"24","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\itemCard.js":"25","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\pageTitle.js":"26","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\chart.js":"27","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\addUser.js":"28","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\loaders\\round.js":"29","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\details.js":"30","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\createReport.js":"31","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\allAssets.js":"32","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\printReport.js":"33","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\printQrCode.js":"34","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\printAsset.js":"35","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\tables\\table.js":"36","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\departDetails.js":"37","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\depAssets.js":"38","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\branchAssets.js":"39","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\invDetailsPrint.js":"40","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\tables\\printTables.js":"41","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\printDepDetails.js":"42"},{"size":521,"mtime":1645299864631,"results":"43","hashOfConfig":"44"},{"size":11365,"mtime":1645300233415,"results":"45","hashOfConfig":"44"},{"size":375,"mtime":1645299864712,"results":"46","hashOfConfig":"44"},{"size":7527,"mtime":1645299864712,"results":"47","hashOfConfig":"44"},{"size":14959,"mtime":1645299864705,"results":"48","hashOfConfig":"44"},{"size":885,"mtime":1645282107632,"results":"49","hashOfConfig":"44"},{"size":1625,"mtime":1645299864692,"results":"50","hashOfConfig":"44"},{"size":11157,"mtime":1645355852473,"results":"51","hashOfConfig":"44"},{"size":2689,"mtime":1645299864693,"results":"52","hashOfConfig":"44"},{"size":11998,"mtime":1645361813699,"results":"53","hashOfConfig":"44"},{"size":3904,"mtime":1645299864704,"results":"54","hashOfConfig":"44"},{"size":10652,"mtime":1645299864711,"results":"55","hashOfConfig":"44"},{"size":6030,"mtime":1645299864696,"results":"56","hashOfConfig":"44"},{"size":11605,"mtime":1645299864711,"results":"57","hashOfConfig":"44"},{"size":2986,"mtime":1645299864710,"results":"58","hashOfConfig":"44"},{"size":13731,"mtime":1645299864706,"results":"59","hashOfConfig":"44"},{"size":7687,"mtime":1645299864632,"results":"60","hashOfConfig":"44"},{"size":23727,"mtime":1645356558410,"results":"61","hashOfConfig":"44"},{"size":3287,"mtime":1645299864703,"results":"62","hashOfConfig":"44"},{"size":2679,"mtime":1645299864697,"results":"63","hashOfConfig":"44"},{"size":2629,"mtime":1645299864698,"results":"64","hashOfConfig":"44"},{"size":12732,"mtime":1645360211312,"results":"65","hashOfConfig":"44"},{"size":348,"mtime":1645299864692,"results":"66","hashOfConfig":"44"},{"size":2444,"mtime":1645299864709,"results":"67","hashOfConfig":"44"},{"size":2939,"mtime":1645299864691,"results":"68","hashOfConfig":"44"},{"size":8970,"mtime":1645299864694,"results":"69","hashOfConfig":"44"},{"size":1147,"mtime":1645299864634,"results":"70","hashOfConfig":"44"},{"size":6447,"mtime":1645388112797,"results":"71","hashOfConfig":"44"},{"size":219,"mtime":1645299864692,"results":"72","hashOfConfig":"44"},{"size":21669,"mtime":1645299864708,"results":"73","hashOfConfig":"44"},{"size":5146,"mtime":1645299864707,"results":"74","hashOfConfig":"44"},{"size":1828,"mtime":1645299864699,"results":"75","hashOfConfig":"44"},{"size":5946,"mtime":1645299864703,"results":"76","hashOfConfig":"44"},{"size":473,"mtime":1645299864702,"results":"77","hashOfConfig":"44"},{"size":2844,"mtime":1645299864701,"results":"78","hashOfConfig":"44"},{"size":5593,"mtime":1645356668304,"results":"79","hashOfConfig":"44"},{"size":10860,"mtime":1645299864708,"results":"80","hashOfConfig":"44"},{"size":1755,"mtime":1645299864700,"results":"81","hashOfConfig":"44"},{"size":1840,"mtime":1645299864700,"results":"82","hashOfConfig":"44"},{"size":3272,"mtime":1645299864701,"results":"83","hashOfConfig":"44"},{"size":1450,"mtime":1645299864695,"results":"84","hashOfConfig":"44"},{"size":8343,"mtime":1645299864702,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"1lf0qrj",{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"88"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"88"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"88"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\index.js",[],["185","186"],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\App.js",["187","188","189"],"import { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Login from \"./main/auth/login\";\r\nimport LoadingPage from \"./main/app/component/loaders/loading\";\r\nimport MainPage from \"./main/app/main\";\r\nimport _fetchAssets from \"./main/app/funtions\";\r\nimport { functions } from \"./main/app/funtions\";\r\nconst { Data } = require(\"./main/app/funtions/data\");\r\nconst keyStoreDbInstance = Data.keyStoreDbInstance;\r\nconst typesStore = Data.assetTypeDbInstance;\r\nconst departmentStore = Data.departmentDbInstance;\r\nconst apiKeyUrl = Data.apiKeyCheckUrl;\r\nconst usersBaseUrl = Data.usersBaseUrl;\r\nconst initialsStore = Data.initDbInstance;\r\n\r\nfunction App() {\r\n  const [isKey, setIsKey] = useState(\"\");\r\n  const [loader, setLoader] = useState(false);\r\n  const [notify, setNotify] = useState(false);\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [logDriect, setLogDirect] = useState(false);\r\n  const [move, setMove] = useState(\"loading\");\r\n  const [assets, setAssets] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [types, setTypes] = useState([]);\r\n  const [department, setDepartment] = useState([]);\r\n  const [initials, setInitials] = useState([]);\r\n  const [sortedCond, setSortedCond] = useState({});\r\n  const [sortedStatus, setSortedStauts] = useState({});\r\n  const [value, setValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    _checkApiKey();\r\n    _getTypes();\r\n    _getDepartments();\r\n    _getInitial();\r\n  }, []);\r\n\r\n  // check api key\r\n  const _checkApiKey = async () => {\r\n    await keyStoreDbInstance.readAll().then((res) => {\r\n      if (res.length !== 0) {\r\n        setIsKey(res[0].key);\r\n      }\r\n    });\r\n  };\r\n\r\n  // read all asset types\r\n  const _getTypes = async () => {\r\n    await typesStore.readAll().then((res) => {\r\n      if (res.length !== 0) {\r\n        return setTypes(res);\r\n      }\r\n    });\r\n  };\r\n\r\n  // read all departments\r\n  const _getDepartments = async () => {\r\n    await departmentStore.readAll().then((res) => {\r\n      if (res.length !== 0) {\r\n        setDepartment(res);\r\n      }\r\n    });\r\n  };\r\n\r\n  // read all initilas\r\n  const _getInitial = async () => {\r\n    const res = await functions._getInitials();\r\n    if (res.length > 0) {\r\n      setInitials(res[0].data);\r\n    }\r\n  };\r\n\r\n  // configure system with  api key\r\n  const _handleConfig = async (key) => {\r\n    if (key === \"\") {\r\n      setType(\"danger\");\r\n      setMsg(\"Please the field cannot be empty!\");\r\n      setNotify(true);\r\n    } else if (key.length < 10) {\r\n      setType(\"danger\");\r\n      setMsg(\"Invalid key, Please try again!\");\r\n      setNotify(true);\r\n    } else {\r\n      setLoader(true);\r\n      fetch(apiKeyUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          apiKey: key,\r\n        }),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((res) => {\r\n          if (res.success === 1) {\r\n            keyStoreDbInstance.create({ key: key });\r\n            setIsKey(key);\r\n            setLoader(false);\r\n          } else {\r\n            setLoader(false);\r\n            setType(\"danger\");\r\n            setMsg(res.message);\r\n            setNotify(true);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  // handle login\r\n  const _handleLog = async (data) => {\r\n    const { email, password } = data;\r\n    const apiKey = isKey + \"-u\";\r\n    if (email === \"\" || password === \"\") {\r\n      setType(\"danger\");\r\n      setMsg(\"Please the field cannot be empty!\");\r\n      setNotify(true);\r\n    } else if (password < 10) {\r\n      setType(\"danger\");\r\n      setMsg(\"Either email or password is wrong, Please try again!\");\r\n      setNotify(true);\r\n    } else {\r\n      setLoader(true);\r\n      fetch(usersBaseUrl + \"login/\" + apiKey, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          email: email,\r\n          password: password,\r\n        }),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((res) => {\r\n          if (res.success === 1) {\r\n            const data = res.data;\r\n            localStorage.setItem(\"user\", JSON.stringify(data));\r\n            setLoader(false);\r\n            setMove(\"loading\");\r\n            setLogDirect(true);\r\n          } else {\r\n            setLoader(false);\r\n            setType(\"danger\");\r\n            setMsg(res.message);\r\n            setNotify(true);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  // load data concurently\r\n  const _fetchAll = async () => {\r\n    const data = await functions._FetchallDAta(isKey);\r\n    if (data.length > 0) {\r\n      const users = data[0];\r\n      const assets = data[1];\r\n      if (users.success === 0) {\r\n        // setType(\"danger\");\r\n        // setMsg(\r\n        //   \"No Users found on the system, Please use the right api key provided to you!\"\r\n        // );\r\n        // setNotify(true);\r\n        return false;\r\n      } else {\r\n        setUsers(users.data);\r\n        setLoader(false);\r\n        setMove(\"dashboard\");\r\n      }\r\n      if (assets.success === 0) {\r\n        // setType(\"danger\");\r\n        // setMsg(\r\n        //   \"No Assets found on the system, Please use the right api key provided to you!\"\r\n        // );\r\n        // setNotify(true);\r\n        return false;\r\n      } else {\r\n        setAssets(assets.data);\r\n        setLoader(false);\r\n        _sortAssetsCond(assets.data);\r\n        _sortAssetsStatus(assets.data);\r\n        _valuateAssets(assets.data);\r\n        setMove(\"dashboard\");\r\n      }\r\n    } else {\r\n      setType(\"danger\");\r\n      setMsg(\r\n        \"No Data found on the system, Please use the right api key provided to you!\"\r\n      );\r\n      setNotify(true);\r\n    }\r\n  };\r\n\r\n  const _handlegetUsers = async () => {\r\n    const us = await functions._getUsers();\r\n    setUsers(us);\r\n  };\r\n\r\n  const _handleGetAssets = async () => {\r\n    var res = 0;\r\n    const as = await functions._fetchAssets();\r\n    if (as !== null) {\r\n      setAssets(as);\r\n      _sortAssetsCond(as);\r\n      _sortAssetsStatus(as);\r\n      _valuateAssets(as);\r\n      res = 1;\r\n    } else {\r\n      setAssets([]);\r\n      res = 0;\r\n    }\r\n    return res;\r\n  };\r\n\r\n  // handle sort assets\r\n  const _sortAssetsCond = async (data) => {\r\n    if (data !== null || data !== undefined) {\r\n      const groupInfo = data.reduce((groups, item) => {\r\n        const {\r\n          NEW = 0,\r\n          OLD = 0,\r\n          DAMAGED = 0,\r\n          REPAIRS = 0,\r\n          TRANSFERED = 0,\r\n        } = groups;\r\n        if (item.CONDITION === \"NEW\") {\r\n          return { ...groups, NEW: NEW + 1 };\r\n        } else if (item.CONDITION === \"OLD\") {\r\n          return { ...groups, OLD: OLD + 1 };\r\n        } else if (item.CONDITION === \"DAMAGED\") {\r\n          return { ...groups, DAMAGED: DAMAGED + 1 };\r\n        } else if (item.CONDITION === \"REPAIRS\") {\r\n          return { ...groups, REPAIRS: REPAIRS + 1 };\r\n        } else if (item.CONDITION === \"TRANSFERED\") {\r\n          return { ...groups, TRANSFERED: TRANSFERED + 1 };\r\n        }\r\n      }, {});\r\n      setSortedCond(groupInfo);\r\n    }\r\n  };\r\n\r\n  // handle sort assets\r\n  const _sortAssetsStatus = async (data) => {\r\n    if (data !== null || data !== undefined) {\r\n      const groupInfo = data.reduce((groups, item) => {\r\n        const { ACTIVE = 0, IN_ACTIVE = 0 } = groups;\r\n        if (item.STATUS === \"ACTIVE\") {\r\n          return { ...groups, ACTIVE: ACTIVE + 1 };\r\n        } else if (item.STATUS === \"IN-ACTIVE\") {\r\n          return { ...groups, IN_ACTIVE: IN_ACTIVE + 1 };\r\n        }\r\n      }, {});\r\n      setSortedStauts(groupInfo);\r\n    }\r\n  };\r\n\r\n  // handle valuate assets\r\n  const _valuateAssets = async (data) => {\r\n    if (data !== null || data !== undefined) {\r\n      let value = 0;\r\n      data.forEach((item) => {\r\n        value += parseInt(item.VALUE);\r\n      });\r\n      setValue(value);\r\n    }\r\n  };\r\n\r\n  // handle add assets type\r\n  const _addTypes = async (data) => {\r\n    if (data === \"\") {\r\n      setType(\"danger\");\r\n      setMsg(\"Asset Type cannot be empty!\");\r\n      setNotify(true);\r\n    } else if (types.some((item) => item.type === data)) {\r\n      setType(\"danger\");\r\n      setMsg(\"This Asset Type Already Exist!\");\r\n      setNotify(true);\r\n    } else {\r\n      setType(\"success\");\r\n      setMsg(\"Asset type added succefully!\");\r\n      setNotify(true);\r\n      typesStore.create({ type: data });\r\n      _getTypes();\r\n    }\r\n  };\r\n\r\n  // handle add department\r\n  const _addDepartment = async (data) => {\r\n    if (data === \"\") {\r\n      setType(\"danger\");\r\n      setMsg(\"Department cannot be empty!\");\r\n      setNotify(true);\r\n    } else if (department.some((item) => item.data === data)) {\r\n      setType(\"danger\");\r\n      setMsg(\"This department has already been added!\");\r\n      setNotify(true);\r\n    } else {\r\n      departmentStore.create({ data });\r\n      setType(\"success\");\r\n      setMsg(\"Department saved successfully!\");\r\n      setNotify(true);\r\n      _getDepartments();\r\n    }\r\n  };\r\n\r\n  // handle add initials\r\n  const _addInitials = (data) => {\r\n    if (data === \"\") {\r\n      setType(\"danger\");\r\n      setMsg(\"Initials cannot be empty!\");\r\n      setNotify(true);\r\n    } else if (initials.length > 0) {\r\n      setType(\"danger\");\r\n      setMsg(\"Initials has been set already!\");\r\n      setNotify(true);\r\n    } else {\r\n      initialsStore.create({ data });\r\n      setType(\"success\");\r\n      setMsg(\"Initials saved successfully!\");\r\n      setNotify(true);\r\n      _getInitial();\r\n    }\r\n  };\r\n\r\n  // close notification bar\r\n  const _handleClose = () => {\r\n    setNotify(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={(props) => (\r\n              <Login\r\n                {...props}\r\n                myKey={isKey}\r\n                configure={_handleConfig}\r\n                loader={loader}\r\n                notify={notify}\r\n                message={msg}\r\n                type={type}\r\n                _login={_handleLog}\r\n                _redirect={logDriect}\r\n                moveTODash={move}\r\n                close={() => setNotify(false)}\r\n                loadAllData={_fetchAll}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/loading\"\r\n            render={(props) => <LoadingPage {...props} />}\r\n          />\r\n          <Route\r\n            path=\"/main\"\r\n            render={(props) => (\r\n              <MainPage\r\n                {...props}\r\n                assets={assets}\r\n                users={users}\r\n                types={types}\r\n                initials={initials}\r\n                sorted={sortedCond}\r\n                status={sortedStatus}\r\n                value={value}\r\n                onAddType={_addTypes}\r\n                onAddDep={_addDepartment}\r\n                addInit={_addInitials}\r\n                type={type}\r\n                message={msg}\r\n                notify={notify}\r\n                getUsers={_handlegetUsers}\r\n                getAssets={_handleGetAssets}\r\n                onClose={_handleClose}\r\n                isKey={isKey}\r\n              />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\reportWebVitals.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\auth\\login.js",["190"],"import { useState } from \"react\";\r\nimport LoadingPage from \"../app/component/loaders/loading\";\r\nimport Notifications from \"../app/component/notifications\";\r\nimport log_bg from \"../app/component/images/log_bg.jpg\";\r\nimport loginback from \"../app/component/images/login-hero.svg\";\r\nimport logo from \"../app/component/images/assets_reg_1.png\";\r\nimport \"../app/main.css\";\r\n\r\nfunction Login(props) {\r\n  const [key, setKey] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const _handleLogin = () => {\r\n    const data = {\r\n      email,\r\n      password,\r\n    };\r\n    props._login(data);\r\n  };\r\n\r\n  // handle api key\r\n  const _handleConfi = async () => {\r\n    props.configure(key);\r\n  };\r\n\r\n  const _handleFetchAll = async () => {\r\n    props.loadAllData();\r\n  };\r\n\r\n  if (props._redirect) {\r\n    return (\r\n      <LoadingPage\r\n        type=\"loading\"\r\n        loaded={props.moveTODash}\r\n        _fetchAll={_handleFetchAll}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <div id=\"login-container\">\r\n        <div className=\"col\">\r\n          <div\r\n            className=\"row justify-content-center\"\r\n            style={{\r\n              backgroundColor: \"#64c5b1\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                height: \"20%\",\r\n                background: `url(${log_bg})`,\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              <img src={logo} width={100} height={100} alt=\"assets rig\" />\r\n              <span\r\n                style={{\r\n                  color: \"white\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: 30,\r\n                  width: \"50%\",\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  marginLeft: \"10px\",\r\n                }}\r\n              >\r\n                <span>Best Cloud Based Assets Managenent System</span>\r\n                <div>ASSETS REG</div>\r\n                <span> Record, Identify, Report</span>\r\n              </span>\r\n            </div>\r\n            {/* <div\r\n              className=\"col-md-6\"\r\n              style={{\r\n                width: \"80%\",\r\n                height: \"80%\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                background: `url(${loginback})`,\r\n                backgroundPosition: \"center\",\r\n                backgroundSize: \"cover\",\r\n                backgroundRepeat: \"no-repeat\",\r\n              }}\r\n            ></div> */}\r\n            <div className=\"col-md-6\">\r\n              {/* sign_in  */}\r\n              {props.myKey !== \"\" ? (\r\n                <div className=\"modal-content cs_modal\">\r\n                  <div className=\"modal-header justify-content-center theme_bg_1\">\r\n                    <h5 className=\"modal-title text_white\">\r\n                      <strong>ASSETS</strong>\r\n                      <strong> RIG</strong>\r\n                    </h5>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    <form>\r\n                      {props.notify ? (\r\n                        <Notifications\r\n                          type={props.type}\r\n                          message={props.message}\r\n                          onAction={props.close}\r\n                        />\r\n                      ) : (\r\n                        <span></span>\r\n                      )}\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          placeholder=\"Enter Your Email\"\r\n                          required\r\n                          aria-required\r\n                          onChange={(e) =>\r\n                            setEmail(e.target.value.toUpperCase())\r\n                          }\r\n                        />\r\n                      </div>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          type=\"password\"\r\n                          className=\"form-control\"\r\n                          onChange={(e) => setPassword(e.target.value)}\r\n                          placeholder=\"Password\"\r\n                        />\r\n                      </div>\r\n                      {props.loader ? (\r\n                        <Notifications\r\n                          type=\"info_load\"\r\n                          message=\"Loging into system, Please wait!\"\r\n                        />\r\n                      ) : (\r\n                        <span\r\n                          className=\"btn_1 full_width text-center\"\r\n                          type=\"button\"\r\n                          role=\"button\"\r\n                          onClick={() => _handleLogin()}\r\n                        >\r\n                          Log in\r\n                        </span>\r\n                      )}\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"modal-content cs_modal\">\r\n                  <div className=\"modal-header justify-content-center theme_bg_1\">\r\n                    <h5 className=\"modal-title text_white\">\r\n                      <strong>ASSETS</strong>\r\n                      <strong> RIG</strong>\r\n                    </h5>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    <form>\r\n                      {props.notify ? (\r\n                        <Notifications\r\n                          type={props.type}\r\n                          message={props.message}\r\n                          onAction={props.close}\r\n                        />\r\n                      ) : (\r\n                        <span></span>\r\n                      )}\r\n                      <h3 className=\"centered\">\r\n                        Please Enter Your Api Key to Configure Your System\r\n                      </h3>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          style={{ textAlign: \"center\" }}\r\n                          placeholder=\"Enter Your API KEY Here\"\r\n                          required\r\n                          aria-required\r\n                          onChange={(e) => setKey(e.target.value)}\r\n                        />\r\n                      </div>\r\n                      {props.loader ? (\r\n                        <Notifications\r\n                          type=\"info_load\"\r\n                          message=\"configuring system, Please wait!\"\r\n                        />\r\n                      ) : (\r\n                        <span\r\n                          className=\"btn_1 full_width text-center\"\r\n                          type=\"button\"\r\n                          role=\"button\"\r\n                          onClick={() => _handleConfi()}\r\n                        >\r\n                          Configure\r\n                        </span>\r\n                      )}\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          {/* </div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\main.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\data.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\loaders\\loading.js",["191"],"import { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Notifications from \"../notifications\";\r\n\r\nexport default function LoadingPage(props) {\r\n  useEffect(() => {\r\n    _move();\r\n  }, []);\r\n\r\n  const _move = () => {\r\n    if (props.type === \"loading\") {\r\n      props._fetchAll();\r\n    }\r\n  };\r\n\r\n  if (props.loaded === \"dashboard\" || props.type === \"dashboard\") {\r\n    return <Redirect to=\"/main/dashbaord\" />;\r\n  } else if (props.type === \"loading\") {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          height: \"100vh\",\r\n          backgroundColor: \"#64c5b1\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          <div className=\"loader--roller theme_loder_1 mb_30\">\r\n            <div />\r\n            <div />\r\n            <div />\r\n            <div />\r\n            <div />\r\n            <div />\r\n            <div />\r\n            <div />\r\n          </div>\r\n          <span>Loading Data Please Wait....</span>\r\n        </div>\r\n        {props.notify ? (\r\n          <Notifications\r\n            type={props._type}\r\n            message={props.message}\r\n            onAction={props.close}\r\n          />\r\n        ) : (\r\n          <span></span>\r\n        )}\r\n      </div>\r\n    );\r\n  } else if (props.move === \"login\" || props.type === \"login\") {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n}\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\index.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\notifications.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\aside.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\inventory\\index.js",["192","193"],"import { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport ItemCard from \"../component/itemCard\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport InvDetails from \"../others/invDetails\";\r\n\r\nexport default function Inventory(props) {\r\n  const [ndata, setData] = useState([]);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [mredirect, setmRedirect] = useState(\"inventory\");\r\n  const [data, setdata] = useState({});\r\n\r\n  const assets = props.assets;\r\n\r\n  useEffect(() => {\r\n    group();\r\n  }, []);\r\n\r\n  // handling sorting\r\n  const group = () => {\r\n    let newArr = [];\r\n    assets.forEach((item) => {\r\n      if (newArr.some((e) => e.ASSETTYPE === item.ASSETTYPE)) {\r\n        newArr.map((e) => {\r\n          if (e.ASSETTYPE === item.ASSETTYPE) {\r\n            e.assetCount += 1;\r\n            let v = parseInt(e.value);\r\n            let V = parseInt(item.VALUE);\r\n            e.value = v + V;\r\n            if (item.STATUS === \"ACTIVE\") {\r\n              e.active += 1;\r\n            } else if (item.STATUS === \"IN-ACTIVE\") {\r\n              e.inActive += 1;\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        newArr.push({\r\n          ASSETTYPE: item.ASSETTYPE,\r\n          assetCount: 1,\r\n          active: item.STATUS === \"ACTIVE\" ? 1 : 0,\r\n          inActive: item.STATUS === \"IN-ACTIVE\" ? 1 : 0,\r\n          value: item.VALUE,\r\n        });\r\n      }\r\n    });\r\n    setData(newArr);\r\n  };\r\n\r\n  // handling search\r\n  const _handleSearch = (value) => {\r\n    let newArr = [];\r\n    if (value !== \"\") {\r\n      ndata.forEach((item) => {\r\n        if (item.ASSETTYPE.toLocaleUpperCase().includes(value.toUpperCase())) {\r\n          newArr.push(item);\r\n        }\r\n      });\r\n      setData(newArr);\r\n    } else {\r\n      group();\r\n    }\r\n  };\r\n  // handling redirect\r\n  const _clicked = (data) => {\r\n    setdata(data);\r\n    setRedirect(true);\r\n  };\r\n\r\n  const _handleBack = () => {\r\n    setdata({});\r\n    setRedirect(false);\r\n  };\r\n\r\n  if (mredirect === \"inventory\") {\r\n    return (\r\n      <div>\r\n        <PageTitle\r\n          title=\"Inventory\"\r\n          createAsset={props.onCreate}\r\n          getAssets={props.getAssets}\r\n          onSettingsClicked={() => setmRedirect(\"settings\")}\r\n        />\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 card_height_100\">\r\n            <div className=\"white_card mb_20\">\r\n              {redirect ? (\r\n                <div className=\"white_card_body\">\r\n                  <InvDetails data={data} onBack={_handleBack} />\r\n                </div>\r\n              ) : (\r\n                <div className=\"white_card_body\">\r\n                  <div>\r\n                    <div className=\"form-group mb-0\">\r\n                      <input\r\n                        type=\"Search\"\r\n                        className=\"form-control\"\r\n                        name=\"inputSearch\"\r\n                        id=\"inputSearch\"\r\n                        placeholder=\"Find Asset by name\"\r\n                        onChange={(e) => _handleSearch(e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    {ndata.length === 0 ? (\r\n                      <span>No Data Found</span>\r\n                    ) : (\r\n                      ndata.map((item, index) => {\r\n                        return (\r\n                          <ItemCard\r\n                            clicked={_clicked}\r\n                            title=\"inventory\"\r\n                            data={item}\r\n                            key={index}\r\n                          />\r\n                        );\r\n                      })\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Redirect to=\"/main/settings\" />;\r\n  }\r\n}\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\reports\\index.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\dashboard\\index.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\settings\\index.js",["194","195","196"],"import { useState } from \"react\";\r\nimport LoadingPage from \"../component/loaders/loading\";\r\nimport Notifications from \"../component/notifications\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport Users from \"../others/users\";\r\n\r\nexport default function Settings(props) {\r\n  const [redirect, setRdirect] = useState(\"settings\");\r\n  const [types, setTypes] = useState(\"\");\r\n  const [depart, setDep] = useState(\"\");\r\n  const [init, setInit] = useState(\"\");\r\n  const [usn, setusn] = useState(false);\r\n  const [usmsg, setusmg] = useState(\"\");\r\n  const [ustype, setusType] = useState(\"\");\r\n  const [branch, setBranch] = useState(\"\");\r\n\r\n  const users = props.data;\r\n  const notify = props.notify;\r\n  const msg = props.message;\r\n  const type = props.type;\r\n  const loading = props.loading;\r\n  const userDirect = props.redirect;\r\n  const user = props.user;\r\n\r\n  const _handleUsers = () => {\r\n    if (user.ROLE === \"CLARK\" || user.ROLE === \"CEO\") {\r\n      setusType(\"danger\");\r\n      setusmg(\"You are not authorised to view this page!\");\r\n      setusn(true);\r\n      return false;\r\n    } else {\r\n      setRdirect(\"users\");\r\n    }\r\n  };\r\n\r\n  const _handleBack = () => {\r\n    setRdirect(\"settings\");\r\n  };\r\n  const _handleLogOut = () => {\r\n    localStorage.clear();\r\n    setRdirect(\"logout\");\r\n  };\r\n\r\n  const _handleAddType = async (event) => {\r\n    event.preventDefault();\r\n    if (user.ROLE === \"CEO\") {\r\n      setusType(\"danger\");\r\n      setusmg(\"You are not authorised to view this page!\");\r\n      setusn(true);\r\n      return false;\r\n    } else {\r\n      props.onAddType(types);\r\n    }\r\n  };\r\n\r\n  const _handleAddbranch = () => {\r\n    if (user.ROLE === \"CEO\") {\r\n      setusType(\"danger\");\r\n      setusmg(\"You are not authorised to view this page!\");\r\n      setusn(true);\r\n      return false;\r\n    } else {\r\n      props.onAddBranch(branch);\r\n    }\r\n  };\r\n\r\n  const _handleAddDep = async (event) => {\r\n    event.preventDefault();\r\n    if (user.ROLE === \"CEO\") {\r\n      setusType(\"danger\");\r\n      setusmg(\"You are not authorised to view this page!\");\r\n      setusn(true);\r\n      return false;\r\n    } else {\r\n      props.onAddDep(depart);\r\n    }\r\n  };\r\n\r\n  // add company initials to the system\r\n  const _handleAddInit = async () => {\r\n    if (user.ROLE === \"CEO\") {\r\n      setusType(\"danger\");\r\n      setusmg(\"You are not authorised to view this page!\");\r\n      setusn(true);\r\n      return false;\r\n    } else {\r\n      props.onAddInit(init);\r\n    }\r\n  };\r\n\r\n  const _handleClose = (data) => {\r\n    setusn(false);\r\n    props.onClose(data);\r\n  };\r\n\r\n  const _handleGetUsers = async (data) => {\r\n    props.fetchUsers(data);\r\n  };\r\n\r\n  const _handleAddUsers = (data) => {\r\n    props.onAddUsers(data);\r\n  };\r\n\r\n  const _handleDelUser = async (id) => {\r\n    props.onDelUser(id);\r\n  };\r\n\r\n  const _handleEditUser = (data) => {\r\n    props.editUser(data);\r\n  };\r\n\r\n  const _handleChangeStsate = () => {\r\n    props.changeState();\r\n  };\r\n\r\n  if (redirect === \"users\") {\r\n    return (\r\n      <Users\r\n        back={_handleBack}\r\n        getUsers={_handleGetUsers}\r\n        data={users}\r\n        addUsers={_handleAddUsers}\r\n        notify={notify}\r\n        message={msg}\r\n        type={type}\r\n        loading={loading}\r\n        onClose={_handleClose}\r\n        redirect={userDirect}\r\n        move={props.move}\r\n        delete={_handleDelUser}\r\n        editUser={_handleEditUser}\r\n        onChangeState={_handleChangeStsate}\r\n        stopLoading={() => props.stopLoading()}\r\n      />\r\n    );\r\n  } else if (redirect === \"settings\") {\r\n    return (\r\n      <div>\r\n        <PageTitle title=\"Settings Page\" onLogOut={_handleLogOut} />\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 card_height_100\">\r\n            <div className=\"white_card mb_20\">\r\n              <div className=\"white_card_body row\">\r\n                <div className=\"col-lg-8 card_height_100\">\r\n                  <div className=\"white_card mb_20\">\r\n                    <div className=\"white_card_header\">\r\n                      <div className=\"box_header m-0\">\r\n                        <div className=\"main-title\">\r\n                          <h3 className=\"m-0\">System Settings </h3>\r\n                        </div>\r\n                        <div className=\"float-lg-right float-none sales_renew_btns justify-content-end\" />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"white_card_body\">\r\n                      <form>\r\n                        {props.notify || usn ? (\r\n                          <Notifications\r\n                            type={props.type || ustype}\r\n                            message={props.message || usmsg}\r\n                            onAction={_handleClose}\r\n                          />\r\n                        ) : (\r\n                          <></>\r\n                        )}\r\n                        <small style={{ color: \"red\" }}>\r\n                          Enter new asset type and save.\r\n                        </small>\r\n                        <div className=\"input-group mb-3\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Add New Asset Type\"\r\n                            aria-label=\"Add New Asset Type\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setTypes(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                          <div className=\"input-group-append\">\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"submit\"\r\n                              onClick={_handleAddType}\r\n                            >\r\n                              Save Type\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                        <small style={{ color: \"red\" }}>\r\n                          Enter new department name and save.\r\n                        </small>\r\n                        <div className=\"input-group mb-3\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Create Department\"\r\n                            aria-label=\"Create Department\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setDep(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                          <div className=\"input-group-append\">\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              role=\"button\"\r\n                              onClick={_handleAddDep}\r\n                            >\r\n                              Save Department\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                        <small style={{ color: \"red\" }}>\r\n                          Enter a branch of your company and save.\r\n                        </small>\r\n                        <div className=\"input-group mb-3\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Add new branch\"\r\n                            aria-label=\"Add new branch\"\r\n                            onChange={(e) =>\r\n                              setBranch(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                          <div className=\"input-group-append\">\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              role=\"button\"\r\n                              onClick={(e) => _handleAddbranch(e)}\r\n                            >\r\n                              Add Brach\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                        <small style={{ color: \"red\" }}>\r\n                          Enter your company/organisational code,\r\n                          eg: NHS/ASH/RHD/OE/R34/\r\n                        </small>\r\n                        <div className=\"input-group mb-3\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Add Company/Organisation's Iniatials\"\r\n                            aria-label=\"Add Company/Organisation's Iniatials\"\r\n                            onChange={(e) =>\r\n                              setInit(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                          <div className=\"input-group-append\">\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              role=\"button\"\r\n                              onClick={(e) => _handleAddInit(e)}\r\n                            >\r\n                              Add Initials\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-outline-primary mb-3\"\r\n                          onClick={() => _handleUsers()}\r\n                        >\r\n                          Users\r\n                        </button>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-4 card_height_100 mb_20\">\r\n                  <div className=\"white_card\">\r\n                    <div className=\"white_card_body p-0\">\r\n                      <div className=\"card_container\">\r\n                        <div className=\"white_box\">\r\n                          <div className=\"\">\r\n                            <h4\r\n                              style={{\r\n                                justifyContent: \"center\",\r\n                                alignItems: \"center\",\r\n                                display: \"flex\",\r\n                              }}\r\n                            >\r\n                              {props.user.FIRSTNAME} {props.user.LASTNAME}\r\n                            </h4>\r\n                            <div\r\n                              style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"center\",\r\n                                alignItems: \"center\",\r\n                                flexDirection: \"column\",\r\n                              }}\r\n                            >\r\n                              <div> {props.user.EMAIL}</div>\r\n                              <div> {props.user.PHONE}</div>\r\n                              <div> {props.user.ROLE}</div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (redirect === \"logout\") {\r\n    return <LoadingPage type=\"login\" />;\r\n  }\r\n}\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\users.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\addAsset.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\assets\\index.js",["197"],"import { useEffect, useState, useRef } from \"react\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { PrintAllAssets } from \"../funtions/prints/allAssets\";\r\nimport { Redirect } from \"react-router\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport Table from \"../component/tables/table\";\r\nimport AssetDetails from \"../others/assetDetails\";\r\n\r\nexport default function Assets(props) {\r\n  const [tdata, setTData] = useState([]);\r\n  const [selectedPage, setSelectedd] = useState(0);\r\n  const [redirect, setRedirect] = useState(\"asset\");\r\n  const [data, setData] = useState({});\r\n\r\n  const assets = props.assets;\r\n  const loading = props.loading;\r\n  const departments = props.departments;\r\n  const user = props.user;\r\n  const type = props.type;\r\n  const msg = props.msg;\r\n  const notify = props.notify;\r\n\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  let indexMin = selectedPage * 5;\r\n  let indexMax = indexMin + 5;\r\n  let paginatedArray =\r\n    assets === null || assets === undefined\r\n      ? []\r\n      : assets.filter((x, index) => index >= indexMin && index < indexMax);\r\n\r\n  // handling search\r\n  const _handleSearch = (value) => {\r\n    let newArr = [];\r\n    if (value !== \"\") {\r\n      assets.forEach((item) => {\r\n        if (\r\n          item.SERIALNUMBER.toUpperCase().includes(value.toUpperCase()) ||\r\n          item.ASSETTYPE.toUpperCase().includes(value.toUpperCase())\r\n        ) {\r\n          newArr.push(item);\r\n        }\r\n      });\r\n      setTData(newArr);\r\n    } else {\r\n      setTData(paginatedArray);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTData(paginatedArray);\r\n  }, []);\r\n\r\n  // handling pagination\r\n  const _handlePaginate = (value) => {\r\n    if (value === \"next\") {\r\n      setSelectedd(selectedPage + 1);\r\n      setTData(paginatedArray);\r\n    } else if (value === \"prev\") {\r\n      setSelectedd(selectedPage - 1);\r\n      setTData(paginatedArray);\r\n    }\r\n  };\r\n\r\n  const _handleRowClick = (item) => {\r\n    setData(item);\r\n    setRedirect(\"asset_details\");\r\n  };\r\n\r\n  const _handleBackClick = () => {\r\n    setData({});\r\n    setRedirect(\"asset\");\r\n  };\r\n\r\n  const _handleEditAsset = async (data) => {\r\n    const res = await props.onEditAsset(data);\r\n    if (res) {\r\n      setData({});\r\n      setTData(paginatedArray);\r\n      setRedirect(\"asset\");\r\n    }\r\n  };\r\n\r\n  const _handleDel = async (id) => {\r\n    const res = await props.onDel(id);\r\n    if (res) {\r\n      setData({});\r\n      setTData(paginatedArray);\r\n      setRedirect(\"asset\");\r\n    }\r\n  };\r\n\r\n  const _handleAddRep = async (data) => {\r\n    await props.onAddRep(data);\r\n    setTData(paginatedArray);\r\n    setRedirect(\"asset_details\");\r\n  };\r\n\r\n  const _handleAssetsValue = () => {\r\n    var res = 0;\r\n    assets.forEach((item) => {\r\n      res = res + parseInt(item.VALUE);\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleDelMany = async (ids) => {\r\n    await props.delMany(ids);\r\n  };\r\n\r\n  if (redirect === \"asset_details\") {\r\n    return (\r\n      <AssetDetails\r\n        data={data}\r\n        goBack={_handleBackClick}\r\n        loading={loading}\r\n        departments={departments}\r\n        onEditAsset={_handleEditAsset}\r\n        onDelete={_handleDel}\r\n        onAddRep={_handleAddRep}\r\n        user={user}\r\n        notify={notify}\r\n        msg={msg}\r\n        type={type}\r\n        stopLoading={() => props.stopLoading()}\r\n      />\r\n    );\r\n  } else if (redirect === \"asset\") {\r\n    return (\r\n      <div>\r\n        <PageTitle\r\n          title=\"Assets\"\r\n          createAsset={props.onCreate}\r\n          getAssets={props.getAssets}\r\n          onSettingsClicked={() => setRedirect(\"settings\")}\r\n        />\r\n        <PrintAllAssets\r\n          ref={componentRef}\r\n          assets={assets}\r\n          value={_handleAssetsValue}\r\n        />\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 card_height_100\">\r\n            <div className=\"white_card mb_20\">\r\n              <div className=\"white_card_header\">\r\n                <div className=\"box_header m-0\">\r\n                  <div className=\"main-title\">\r\n                    <h3 className=\"m-0\">List Of Assets </h3>\r\n                  </div>\r\n                  <div className=\"float-lg-right float-none sales_renew_btns justify-content-end\">\r\n                    <span\r\n                      style={{\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                    >\r\n                      ASSETS REG\r\n                    </span>\r\n                    <span\r\n                      type=\"button\"\r\n                      role=\"button\"\r\n                      style={{\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                      onClick={handlePrint}\r\n                    >\r\n                      <i title=\"print all assets\" className=\"fa fa-print\"></i>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"white_card_body\">\r\n                <div>\r\n                  <div className=\"form-group mb-0\">\r\n                    <input\r\n                      type=\"Search\"\r\n                      className=\"form-control\"\r\n                      name=\"inputSearch\"\r\n                      id=\"inputSearch\"\r\n                      placeholder=\"Search Assets by serial number or asset type\"\r\n                      onChange={(e) => _handleSearch(e.target.value)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <Table\r\n                  data={tdata}\r\n                  assets={assets}\r\n                  onClick={_handleRowClick}\r\n                  del={_handleDelMany}\r\n                />\r\n                <div className=\"col-lg-12\">\r\n                  <div className=\"white_box mb_30\">\r\n                    <nav aria-label=\"Page navigation example\">\r\n                      <ul className=\"pagination justify-content-center\">\r\n                        {selectedPage >= 1 ? (\r\n                          <li\r\n                            className=\"page-item\"\r\n                            type=\"button\"\r\n                            role=\"button\"\r\n                            onClick={() => _handlePaginate(\"prev\")}\r\n                          >\r\n                            <span className=\"page-link\">Previous</span>\r\n                          </li>\r\n                        ) : (\r\n                          <li className=\"page-item disabled\">\r\n                            <span className=\"page-link\" aria-disabled=\"true\">\r\n                              Previous\r\n                            </span>\r\n                          </li>\r\n                        )}\r\n                        {tdata.length === 0 ? (\r\n                          <li className=\"page-item disabled\">\r\n                            <span className=\"page-link\" aria-disabled=\"true\">\r\n                              Next\r\n                            </span>\r\n                          </li>\r\n                        ) : (\r\n                          <li\r\n                            className=\"page-item\"\r\n                            type=\"button\"\r\n                            role=\"button\"\r\n                            onClick={() => _handlePaginate(\"next\")}\r\n                          >\r\n                            <span className=\"page-link\">Next</span>\r\n                          </li>\r\n                        )}\r\n                      </ul>\r\n                    </nav>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (redirect === \"settings\") {\r\n    return <Redirect to=\"/main/settings\" />;\r\n  }\r\n}\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\assetDetails.js",["198"],"import React, { useRef, useState } from \"react\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport Loaders from \"../component/loaders/round\";\r\nimport Notifications from \"../component/notifications\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport CreReport from \"./createReport\";\r\nimport { PrintQrCode } from \"../funtions/prints/printQrCode\";\r\nimport { PrintAsset } from \"../funtions/prints/printAsset\";\r\n\r\nexport default function AssetDetails(props) {\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [creReport, setCreReport] = useState(false);\r\n  const [report, setReport] = useState({});\r\n  const [edit, setEdit] = useState(false);\r\n  const [editStatus, setEditStatus] = useState(false);\r\n  const [editCondition, setEditCondition] = useState(false);\r\n  const [tran, setTrans] = useState(\"\");\r\n  const [showNoti, setShowNoti] = useState(false);\r\n  const [condition, setCondition] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [showDelNoti, setShowDel] = useState(false);\r\n  const [status, setStatus] = useState(\"\");\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [errType, setErrType] = useState(\"\");\r\n\r\n  const loading = props.loading;\r\n  let item = props.data;\r\n  const departments = props.departments;\r\n  const user = props.user;\r\n\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  const _handleLoading = () => {\r\n    props.stopLoading();\r\n  };\r\n\r\n  const secondRef = useRef();\r\n  const handlePrintAss = useReactToPrint({\r\n    content: () => secondRef.current,\r\n  });\r\n\r\n  const _handleAction = (type) => {\r\n    if (type === \"close\" || type === \"clicked\") {\r\n      setShowNoti(false);\r\n      setShowDel(false);\r\n    } else {\r\n      // handle delete\r\n      props.onDelete(item._id);\r\n    }\r\n  };\r\n\r\n  const _handleDel = () => {\r\n    if (user.ROLE === \"CLARK\" || user.ROLE === \"CEO\") {\r\n      setErrType(\"danger\");\r\n      setMsg(\"You are not authorised to view this page!\");\r\n      showNoti(true);\r\n      return false;\r\n    } else {\r\n      setShowDel(true);\r\n    }\r\n  };\r\n\r\n  const _handleSave = async (check) => {\r\n    if (check === \"d\") {\r\n      if (department === \"\") {\r\n        setMsg(\"Field is required!\");\r\n        setErrType(\"danger\");\r\n        setShowNoti(true);\r\n      } else {\r\n        const data = {\r\n          serialNumber: item.SERIALNUMBER,\r\n          assetType: item.ASSETTYPE,\r\n          brand: item.BRAND,\r\n          department: department,\r\n          condition: item.CONDITION,\r\n          status: item.STATUS,\r\n          value: item.VALUE,\r\n          tran: item.TRANSFEREDTO,\r\n          branch: item.BRANCH,\r\n          dp: item.DONATEDORPURCHASED,\r\n          date: item.DATEOFPURCHASEORDONATED,\r\n          donatedBy: item.DONATEDBY,\r\n        };\r\n        await props.onEditAsset(data);\r\n      }\r\n    } else if (check === \"c\") {\r\n      if (condition === \"\") {\r\n        setMsg(\"Field is required!\");\r\n        setErrType(\"danger\");\r\n        setShowNoti(true);\r\n      } else {\r\n        if (condition === \"TRANSFERED\") {\r\n          if (tran === \"\") {\r\n            setMsg(\"Please provide where item is transfered to!\");\r\n            setErrType(\"danger\");\r\n            setShowNoti(true);\r\n          } else {\r\n            const data = {\r\n              serialNumber: item.SERIALNUMBER,\r\n              assetType: item.ASSETTYPE,\r\n              brand: item.BRAND,\r\n              department: item.DEPARTMENT,\r\n              condition: condition,\r\n              status: item.STATUS,\r\n              value: item.VALUE,\r\n              tran: tran,\r\n              branch: item.BRANCH,\r\n              dp: item.DONATEDORPURCHASED,\r\n              date: item.DATEOFPURCHASEORDONATED,\r\n              donatedBy: item.DONATEDBY,\r\n            };\r\n            props.onEditAsset(data);\r\n          }\r\n        } else {\r\n          const data = {\r\n            serialNumber: item.SERIALNUMBER,\r\n            assetType: item.ASSETTYPE,\r\n            brand: item.BRAND,\r\n            department: item.DEPARTMENT,\r\n            condition: condition,\r\n            status: item.STATUS,\r\n            value: item.VALUE,\r\n            tran: item.TRANSFEREDTO,\r\n            branch: item.BRANCH,\r\n            dp: item.DONATEDORPURCHASED,\r\n            date: item.DATEOFPURCHASEORDONATED,\r\n            donatedBy: item.DONATEDBY,\r\n          };\r\n          props.onEditAsset(data);\r\n        }\r\n      }\r\n    } else {\r\n      if (status === \"\") {\r\n        setMsg(\"Field is required!\");\r\n        setErrType(\"danger\");\r\n        setShowNoti(true);\r\n      } else {\r\n        const data = {\r\n          serialNumber: item.SERIALNUMBER,\r\n          assetType: item.ASSETTYPE,\r\n          brand: item.BRAND,\r\n          department: item.DEPARTMENT,\r\n          condition: item.CONDITION,\r\n          status: status,\r\n          value: item.VALUE,\r\n          tran: item.TRANSFEREDTO,\r\n          branch: item.BRANCH,\r\n          dp: item.DONATEDORPURCHASED,\r\n          date: item.DATEOFPURCHASEORDONATED,\r\n          donatedBy: item.DONATEDBY,\r\n        };\r\n        props.onEditAsset(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  const _handleAddRep = async (data) => {\r\n    await props.onAddRep(data);\r\n    setCreReport(false);\r\n  };\r\n\r\n  const _handleRedirect = () => {\r\n    if (user.ROLE === \"CLARK\" || user.ROLE === \"CEO\") {\r\n      setErrType(\"danger\");\r\n      setMsg(\"You are not authorised to view this page!\");\r\n      showNoti(true);\r\n      return false;\r\n    } else {\r\n      setRedirect(true);\r\n    }\r\n  };\r\n\r\n  if (creReport) {\r\n    return (\r\n      <CreReport\r\n        back={() => setCreReport(false)}\r\n        data={report}\r\n        loading={loading}\r\n        user={user}\r\n        onAddRep={_handleAddRep}\r\n        type={props.type}\r\n        msg={props.msg}\r\n        notify={props.notify}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <PageTitle title=\"Asset Details\" onBack={props.goBack} />\r\n        <div className=\"row \">\r\n          <PrintQrCode ref={componentRef} qr={item.QR} />\r\n          <PrintAsset ref={secondRef} item={item} />\r\n          <div className=\"col-12 QA_section\">\r\n            <div className=\"card QA_table \">\r\n              <div className=\"card-header\">\r\n                Asset Serial Number: <strong>{item.SERIALNUMBER}</strong>\r\n                <span className=\"float-right\">\r\n                  {redirect ? (\r\n                    <span></span>\r\n                  ) : (\r\n                    <span\r\n                      type=\"button\"\r\n                      role=\"button\"\r\n                      style={{\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                      onClick={() => {\r\n                        handlePrintAss();\r\n                      }}\r\n                    >\r\n                      <i title=\"print inventory\" className=\"fa fa-print\"></i>\r\n                    </span>\r\n                  )}\r\n                </span>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                {showNoti ? (\r\n                  <Notifications\r\n                    type={errType}\r\n                    message={msg}\r\n                    onAction={_handleAction}\r\n                  />\r\n                ) : (\r\n                  <span></span>\r\n                )}\r\n                {redirect ? (\r\n                  <div className=\"row centered\">\r\n                    <div className=\"col-lg-6 align-self-center\">\r\n                      <div className=\"input-group mb-3\">\r\n                        {edit ? (\r\n                          <select\r\n                            className=\"custom-select\"\r\n                            onChange={(e) =>\r\n                              setDepartment(e.target.value.toUpperCase())\r\n                            }\r\n                          >\r\n                            <option>Choose...</option>\r\n                            {departments.map((item, index) => {\r\n                              return (\r\n                                <option value={item.type} key={index}>\r\n                                  {item.type}\r\n                                </option>\r\n                              );\r\n                            })}\r\n                          </select>\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            placeholder={item.DEPARTMENT}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n                        <div className=\"input-group-append\">\r\n                          {edit ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  _handleLoading();\r\n                                  setEdit(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleSave(\"d\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              onClick={() => setEdit(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"input-group mb-3\">\r\n                        {editCondition ? (\r\n                          <select\r\n                            className=\"custom-select\"\r\n                            onChange={(e) =>\r\n                              setCondition(e.target.value.toUpperCase())\r\n                            }\r\n                          >\r\n                            <option>Choose...</option>\r\n                            <option value=\"new\">NEW</option>\r\n                            <option value=\"old\">OLD</option>\r\n                            <option value=\"damaged\">DAMAGED</option>\r\n                            <option value=\"repairs\">REPAIRS</option>\r\n                            <option value=\"transfered\">TRANSFERED</option>\r\n                          </select>\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            placeholder={item.CONDITION}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n                        <div className=\"input-group-append\">\r\n                          {editCondition ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  _handleLoading();\r\n                                  setEditCondition(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleSave(\"c\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEditCondition(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      {condition === \"TRANSFERED\" ? (\r\n                        <div className=\"input-group mb-3\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Tranfered to\"\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setTrans(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                        </div>\r\n                      ) : (\r\n                        <span></span>\r\n                      )}\r\n                      <div className=\"input-group mb-3\">\r\n                        {editStatus ? (\r\n                          <select\r\n                            className=\"custom-select\"\r\n                            onChange={(e) =>\r\n                              setStatus(e.target.value.toUpperCase())\r\n                            }\r\n                          >\r\n                            <option>Choose status...</option>\r\n                            <option value=\"active\">ACTIVE</option>\r\n                            <option value=\"in-active\">IN-ACTIVE</option>\r\n                          </select>\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            placeholder={item.STATUS}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n                        <div className=\"input-group-append\">\r\n                          {editStatus ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  _handleLoading();\r\n                                  setEditStatus(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleSave(\"s\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEditStatus(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary mr-3\"\r\n                        onClick={() => setRedirect(false)}\r\n                      >\r\n                        Cancel\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    {showDelNoti ? (\r\n                      <Notifications\r\n                        type=\"warning\"\r\n                        message=\"Proceed To Delete\"\r\n                        onAction={_handleAction}\r\n                      />\r\n                    ) : (\r\n                      <span></span>\r\n                    )}\r\n                    <div className=\"row\">\r\n                      <div className=\"col-lg-6 align-self-center\">\r\n                        <img\r\n                          src={item.QR}\r\n                          alt=\"qr-code\"\r\n                          className=\"mx-auto d-block sm_w_100\"\r\n                          height={300}\r\n                        />\r\n                      </div>\r\n                      {/*end col*/}\r\n                      <div className=\"col-lg-6 align-self-center\">\r\n                        <div className=\"single-pro-detail\">\r\n                          <p className=\"mb-1\">Asset Details</p>\r\n                          <div className=\"custom-border mb-3\" />\r\n                          <h4 className=\"pro-title\">\r\n                            <span>Asset Type:</span> {item.ASSETTYPE}\r\n                          </h4>\r\n                          <p className=\"text-muted mb-0\">\r\n                            <span>Serial Number:</span>{\" \"}\r\n                            <strong>{item.SERIALNUMBER}</strong>\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Department: {item.DEPARTMENT}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Condition : {item.CONDITION}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Brand : {item.BRAND}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Value : {item.VALUE}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Status : {item.STATUS}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Branch : {item.BRANCH}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Transfered :{\" \"}\r\n                            {item.CONDITION === \"TRANSFERED\" ? \"YES\" : \"NO\"}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Transfered To :{\" \"}\r\n                            {item.CONDITION === \"TRANSFERED\"\r\n                              ? item.TRANSFEREDTO\r\n                              : \"\"}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Purchased / Donated : {item.DONATEDORPURCHASED}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Donated By :{\" \"}\r\n                            {item.DONATEDORPURCHASED === \"DONATED\"\r\n                              ? item.DONATEDBY\r\n                              : \"\"}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Date Purchased / Donated :{\" \"}\r\n                            {item.DATEOFPURCHASEORDONATED}\r\n                          </p>\r\n                          <p className=\"text-muted mb-0\">\r\n                            Date Added :{\" \"}\r\n                            {item.createdAt !== undefined ? (\r\n                              item.createdAt.split(\"T\")[0]\r\n                            ) : (\r\n                              <></>\r\n                            )}\r\n                          </p>\r\n                          <div className=\"quantity mt-2\">\r\n                            <span\r\n                              type=\"button\"\r\n                              role=\"button\"\r\n                              className=\"btn green_bg text-white px-4 d-inline-block \"\r\n                              onClick={handlePrint}\r\n                            >\r\n                              <i className=\"fa fa-print mr-2\" />\r\n                              Print QR Code\r\n                            </span>\r\n                            <span\r\n                              type=\"button\"\r\n                              role=\"button\"\r\n                              className=\"btn green_bg text-white px-4 d-inline-block ml-2\"\r\n                              onClick={() => _handleRedirect()}\r\n                            >\r\n                              <i className=\"fa fa-edit\" />\r\n                            </span>\r\n                            {loading ? (\r\n                              <span className=\"btn green_bg text-white px-4 d-inline-block ml-2\">\r\n                                <Loaders loading={loading} />\r\n                              </span>\r\n                            ) : (\r\n                              <span\r\n                                type=\"button\"\r\n                                role=\"button\"\r\n                                className=\"btn green_bg text-white px-4 d-inline-block ml-2\"\r\n                                onClick={() => {\r\n                                  _handleDel();\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-trash\" />\r\n                              </span>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      {/*end col*/}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\help\\index.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\deps\\index.js",["199","200"],"import { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ItemCard from \"../component/itemCard\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport DepartDetails from \"../others/departDetails\";\r\n\r\nexport default function Departments(props) {\r\n  const [mredirect, setmRedirect] = useState(\"departments\");\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [assets, setAssets] = useState([]);\r\n  const [asset, setAsset] = useState({});\r\n\r\n  const data = props.assets;\r\n\r\n  useEffect(() => {\r\n    group();\r\n  }, []);\r\n\r\n  const group = () => {\r\n    let newArr = [];\r\n    data.forEach((item) => {\r\n      if (newArr.some((e) => e.department === item.DEPARTMENT)) {\r\n        newArr.map((e) => {\r\n          if (e.department === item.DEPARTMENT) {\r\n            e.assetCount += 1;\r\n            e.assets.push(item);\r\n          }\r\n        });\r\n      } else {\r\n        newArr.push({\r\n          department: item.DEPARTMENT,\r\n          assetCount: 1,\r\n          assets: [item],\r\n        });\r\n      }\r\n    });\r\n    setAssets(newArr);\r\n  };\r\n\r\n  const _clicked = (data) => {\r\n    setAsset(data);\r\n    setRedirect(true);\r\n  };\r\n\r\n  if (mredirect === \"departments\") {\r\n    return (\r\n      <div>\r\n        <PageTitle\r\n          title=\"Departments\"\r\n          createAsset={props.onCreate}\r\n          getAssets={props.getAssets}\r\n          onSettingsClicked={() => setmRedirect(\"settings\")}\r\n        />\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 card_height_100\">\r\n            <div className=\"white_card mb_20\">\r\n              {redirect ? (\r\n                <div className=\"white_card_body\">\r\n                  <DepartDetails\r\n                    data={asset}\r\n                    onBack={() => setRedirect(false)}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <div className=\"white_card_body\">\r\n                  <div className=\"row\">\r\n                    {assets.length === 0 ? (\r\n                      <span>No Data Found</span>\r\n                    ) : (\r\n                      assets.map((item, index) => {\r\n                        return (\r\n                          <ItemCard\r\n                            clicked={_clicked}\r\n                            title=\"departments\"\r\n                            data={item}\r\n                            key={index}\r\n                          />\r\n                        );\r\n                      })\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Redirect to=\"/main/settings\" />;\r\n  }\r\n}\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\faq\\index.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\branches\\index.js",["201","202"],"import { useRef, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport { BranchAssets } from \"../funtions/prints/branchAssets\";\r\nimport { DepAssets } from \"../funtions/prints/depAssets\";\r\nimport \"../main.css\";\r\nimport AssetDetails from \"../others/assetDetails\";\r\n\r\nexport default function Branches(props) {\r\n  const [redirect, setRedirect] = useState(\"branch\");\r\n  const [branch, setBranch] = useState({});\r\n  const [value, setValue] = useState(0);\r\n  const [deps, setDeps] = useState([]);\r\n  const [depDetails, setDepDetails] = useState([]);\r\n  const [asset, setAsset] = useState({});\r\n  const [depTitle, setDepTitle] = useState(\"\");\r\n\r\n  const style = {\r\n    marginLeft: \"5px\",\r\n    width: \"90%\",\r\n    fontSize: 15,\r\n    marginTop: \"5px\",\r\n  };\r\n\r\n  const componentRef = useRef();\r\n  const _handlePrintAll = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  const depComponentRef = useRef();\r\n  const _handlePrintDep = useReactToPrint({\r\n    content: () => depComponentRef.current,\r\n  });\r\n\r\n  const assets = props.assets;\r\n  const loading = props.loading;\r\n  const departments = props.departments;\r\n  const user = props.user;\r\n  const type = props.type;\r\n  const msg = props.msg;\r\n  const notify = props.notify;\r\n\r\n  const _handleBackClick = () => {\r\n    setAsset({});\r\n    setRedirect(\"branch\");\r\n  };\r\n\r\n  const _handleClick = (item) => {\r\n    setBranch(item);\r\n    _value(item);\r\n    groupDep(item);\r\n  };\r\n\r\n  const _handleDeps = (item) => {\r\n    setDepTitle(item.department);\r\n    setDepDetails(item.assets);\r\n  };\r\n\r\n  const group = () => {\r\n    let newArr = [];\r\n    assets.forEach((item) => {\r\n      if (newArr.some((e) => e.branch === item.BRANCH)) {\r\n        newArr.map((e) => {\r\n          if (e.branch === item.BRANCH) {\r\n            e.assets.push(item);\r\n          }\r\n        });\r\n      } else {\r\n        newArr.push({\r\n          branch: item.BRANCH,\r\n          assets: [item],\r\n        });\r\n      }\r\n    });\r\n    return newArr;\r\n  };\r\n\r\n  const _value = async (item) => {\r\n    var results = 0;\r\n    const ass = item.assets;\r\n    ass.forEach((item) => {\r\n      results += parseInt(item.VALUE);\r\n    });\r\n    setValue(results);\r\n  };\r\n\r\n  const groupDep = (item) => {\r\n    let newArr = [];\r\n    item.assets.forEach((elment) => {\r\n      if (newArr.some((e) => e.department === elment.DEPARTMENT)) {\r\n        newArr.map((e) => {\r\n          if (e.department === elment.DEPARTMENT) {\r\n            e.assets.push(elment);\r\n          }\r\n        });\r\n      } else {\r\n        newArr.push({\r\n          department: elment.DEPARTMENT,\r\n          assets: [elment],\r\n        });\r\n      }\r\n    });\r\n    setDeps(newArr);\r\n  };\r\n\r\n  const _handleAssetDetails = (item) => {\r\n    setAsset(item);\r\n    setRedirect(\"assetDetsils\");\r\n  };\r\n\r\n  const _handleEditAsset = async (data) => {\r\n    const res = await props.onEditAsset(data);\r\n    if (res) {\r\n      setAsset({});\r\n      setDepDetails([]);\r\n      setRedirect(\"branch\");\r\n    }\r\n  };\r\n\r\n  const _handleDel = async (id) => {\r\n    const res = await props.onDel(id);\r\n    if (res) {\r\n      setAsset({});\r\n      setDepDetails([]);\r\n      setRedirect(\"branch\");\r\n    }\r\n  };\r\n\r\n  const _handleAssetsValue = () => {\r\n    var res = 0;\r\n    branch.assets.forEach((item) => {\r\n      res = res + parseInt(item.VALUE);\r\n    });\r\n    return res;\r\n  };\r\n\r\n  if (redirect === \"branch\") {\r\n    return (\r\n      <div>\r\n        <PageTitle\r\n          title=\"Branches\"\r\n          createAsset={props.onCreate}\r\n          getAssets={props.getAssets}\r\n          onSettingsClicked={() => setRedirect(\"settings\")}\r\n        />\r\n        <BranchAssets\r\n          ref={componentRef}\r\n          assets={branch}\r\n          value={_handleAssetsValue}\r\n        />\r\n        <DepAssets\r\n          ref={depComponentRef}\r\n          assets={depDetails}\r\n          title={depTitle}\r\n          branch={branch.branch}\r\n        />\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-4\">\r\n            <div className=\"white_card \">\r\n              <div\r\n                className=\"white_card_body\"\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  height: \"80vh\",\r\n                }}\r\n              >\r\n                <span\r\n                  style={{\r\n                    fontSize: 19,\r\n                    fontWeight: \"bold\",\r\n                    borderBottom: \"solid\",\r\n                    borderColor: \"GrayText\",\r\n                    borderWidth: 1,\r\n                  }}\r\n                >\r\n                  Branch List\r\n                </span>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    overflowY: \"scroll\",\r\n                  }}\r\n                >\r\n                  {group().map((item, index) => {\r\n                    return (\r\n                      <span\r\n                        key={index}\r\n                        style={style}\r\n                        type=\"button\"\r\n                        role=\"button\"\r\n                        onClick={() => _handleClick(item)}\r\n                      >\r\n                        {item.branch}\r\n                      </span>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-lg-8 card_height_100\">\r\n            <div\r\n              className=\"white_card \"\r\n              style={{ height: \"80vh\", width: \"100%\" }}\r\n            >\r\n              <div\r\n                className=\"white_card_body\"\r\n                style={{ display: \"flex\", flexDirection: \"column\" }}\r\n              >\r\n                <span\r\n                  style={{\r\n                    fontSize: 19,\r\n                    fontWeight: \"bold\",\r\n                    borderBottom: \"solid\",\r\n                    borderColor: \"GrayText\",\r\n                    borderWidth: 1,\r\n                  }}\r\n                >\r\n                  Branch Details\r\n                  {Object.keys(branch).length === 0 ? (\r\n                    <spa></spa>\r\n                  ) : (\r\n                    <span\r\n                      className=\"float-right\"\r\n                      style={{ display: \"flex\", alignItems: \"center\" }}\r\n                    >\r\n                      {branch.branch}\r\n                      <span\r\n                        className=\"white_btn3 mb-1\"\r\n                        style={{\r\n                          height: \"7px\",\r\n                          width: \"7px\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          alignItems: \"center\",\r\n                          marginLeft: \"5px\",\r\n                        }}\r\n                        type=\"button\"\r\n                        role=\"button\"\r\n                        title=\"print branch details\"\r\n                        onClick={() => _handlePrintAll()}\r\n                      >\r\n                        <i className=\"fa fa-print\"></i>\r\n                      </span>\r\n                    </span>\r\n                  )}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    fontSize: 15,\r\n                    borderBottom: \"solid\",\r\n                    borderColor: \"#64c5b1\",\r\n                    borderWidth: 0.5,\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"space-around\",\r\n                    color: \"#64c5b1\",\r\n                    marginTop: \"10px\",\r\n                  }}\r\n                >\r\n                  <span>\r\n                    # of Assets:{\" \"}\r\n                    {Object.keys(branch).length === 0 ? (\r\n                      <span></span>\r\n                    ) : (\r\n                      branch.assets.length\r\n                    )}\r\n                  </span>\r\n                  <span>\r\n                    Value of Asset:{\" \"}\r\n                    {Object.keys(branch).length === 0 ? 0 : value}\r\n                  </span>\r\n                </span>\r\n                <div className=\"row\" style={{ height: \"70vh\" }}>\r\n                  <div\r\n                    className=\"col-md-4\"\r\n                    style={{\r\n                      height: \"100%\",\r\n                      borderRight: \"solid\",\r\n                      borderColor: \"#64c5b1\",\r\n                      marginRight: \"10px\",\r\n                      borderWidth: 0.5,\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                      overflowY: \"scroll\",\r\n                    }}\r\n                  >\r\n                    {deps.map((item, index) => {\r\n                      return (\r\n                        <span\r\n                          key={index}\r\n                          className=\"mt-2 pl-1\"\r\n                          type=\"button\"\r\n                          role=\"button\"\r\n                          onClick={() => _handleDeps(item)}\r\n                        >\r\n                          {item.department}\r\n                        </span>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      padding: \"3px\",\r\n                      height: \"65vh\",\r\n                      borderBottom: \"solid\",\r\n                      borderColor: \"#64c5b1\",\r\n                      borderWidth: 0.5,\r\n                      width: \"63%\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      className=\"row\"\r\n                      style={{\r\n                        width: \"100%\",\r\n                        fontWeight: \"bold\",\r\n                        borderBottom: \"solid\",\r\n                        borderWidth: \"0.5px\",\r\n                      }}\r\n                    >\r\n                      <span className=\"col-md-7\">Serial Number</span>\r\n                      <span className=\"col-md-5\">Asset Type</span>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        width: \"100%\",\r\n                        overflowY: \"scroll\",\r\n                        height: \"60vh\",\r\n                      }}\r\n                    >\r\n                      {depDetails.map((item, index) => {\r\n                        return (\r\n                          <div\r\n                            key={index}\r\n                            className=\"row mb-2\"\r\n                            style={{ width: \"100%\" }}\r\n                            type=\"button\"\r\n                            role=\"button\"\r\n                            onClick={() => _handleAssetDetails(item)}\r\n                          >\r\n                            <div className=\"col-md-7\">{item.SERIALNUMBER}</div>\r\n                            <div className=\"col-md-5\">{item.ASSETTYPE}</div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        height: \"10%\",\r\n                      }}\r\n                    >\r\n                      <span\r\n                        className=\"white_btn3 mb-1\"\r\n                        style={{\r\n                          height: \"5px\",\r\n                          width: \"7px\",\r\n                          display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          alignItems: \"center\",\r\n                          marginLeft: \"5px\",\r\n                        }}\r\n                        type=\"button\"\r\n                        role=\"button\"\r\n                        title=\"print assets in department\"\r\n                        onClick={() => _handlePrintDep()}\r\n                      >\r\n                        <i className=\"fa fa-print\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (redirect === \"settings\") {\r\n    return <Redirect to=\"/main/settings\" />;\r\n  } else if (redirect === \"assetDetsils\") {\r\n    return (\r\n      <AssetDetails\r\n        data={asset}\r\n        goBack={_handleBackClick}\r\n        loading={loading}\r\n        departments={departments}\r\n        onEditAsset={_handleEditAsset}\r\n        onDelete={_handleDel}\r\n        user={user}\r\n        notify={notify}\r\n        msg={msg}\r\n        type={type}\r\n        stopLoading={() => props.stopLoading()}\r\n      />\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\loaders\\elipses.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\invDetails.js",["203"],"import React, { useRef, useState } from \"react\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { PrintInvDetails } from \"../funtions/prints/invDetailsPrint\";\r\n\r\nexport default function InvDetails(props) {\r\n  const data = props.data;\r\n\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <PrintInvDetails ref={componentRef} data={data} />\r\n      <div className=\"row \">\r\n        <div className=\"col-12 QA_section\">\r\n          <div className=\"card QA_table \">\r\n            <div className=\"card-header\">\r\n              Inventory Details\r\n              <span className=\"float-right\">\r\n                <span\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                >\r\n                  ASSETS REG\r\n                </span>\r\n                <span\r\n                  type=\"button\"\r\n                  role=\"button\"\r\n                  onClick={() => props.onBack()}\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                >\r\n                  <i className=\"fa fa-arrow-left\"></i>\r\n                </span>\r\n                <span\r\n                  type=\"button\"\r\n                  role=\"button\"\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                  onClick={handlePrint}\r\n                >\r\n                  <i title=\"print inventory\" className=\"fa fa-print\"></i>\r\n                </span>\r\n              </span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">Asset Type</div>\r\n                <div className=\"col-6\">{data.ASSETTYPE}</div>\r\n                <div className=\"col-6\">Total Numer Of Assets</div>\r\n                <div className=\"col-6\">{data.assetCount}</div>\r\n                <div className=\"col-6\">Total Numer Of Active Assets</div>\r\n                <div className=\"col-6\">{data.active}</div>\r\n                <div className=\"col-6\">Total Numer Of In-Active Assets</div>\r\n                <div className=\"col-6\">{data.inActive}</div>\r\n                <div className=\"col-6\">Total Value Of Assets</div>\r\n                <div className=\"col-6\">{data.value}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\itemCard.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\pageTitle.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\chart.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\addUser.js",["204"],"import { useState } from \"react\";\r\nimport Loaders from \"../component/loaders/round\";\r\nimport Notifications from \"../component/notifications\";\r\nimport PageTitle from \"../component/pageTitle\";\r\n\r\nexport default function AddUser(props) {\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setMail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [role, setRole] = useState(\"\");\r\n\r\n  const _handleSaveUser = (event) => {\r\n    event.preventDefault();\r\n    const data = {\r\n      firstName,\r\n      lastName,\r\n      phone,\r\n      email,\r\n      password,\r\n      role,\r\n    };\r\n    props.onSaveUser(data);\r\n  };\r\n\r\n  const _handleClose = () => {\r\n    props.close();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PageTitle title=\"Users\" subTitle=\"addUser\" goBack={props.back} />\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-12 card_height_100\">\r\n          {props.notify ? (\r\n            <Notifications\r\n              type={props.type}\r\n              message={props.msg}\r\n              onAction={_handleClose}\r\n            />\r\n          ) : (\r\n            <span></span>\r\n          )}\r\n          <div className=\"white_card mb_10\">\r\n            <div className=\"white_card_body row\">\r\n              <div className=\"col-md-6\">\r\n                <div className=\"white_box\">\r\n                  <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                      <span className=\"input-group-text\" id=\"basic-addon3\">\r\n                        First Name:\r\n                      </span>\r\n                    </div>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"basic-url\"\r\n                      aria-describedby=\"basic-addon3\"\r\n                      onChange={(e) =>\r\n                        setFirstName(e.target.value.toUpperCase())\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                      <span className=\"input-group-text\" id=\"basic-addon3\">\r\n                        Last Name:\r\n                      </span>\r\n                    </div>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"basic-url\"\r\n                      aria-describedby=\"basic-addon3\"\r\n                      onChange={(e) =>\r\n                        setLastName(e.target.value.toUpperCase())\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                      <span className=\"input-group-text\" id=\"basic-addon3\">\r\n                        Phone :\r\n                      </span>\r\n                    </div>\r\n                    <input\r\n                      type=\"number\"\r\n                      className=\"form-control\"\r\n                      id=\"basic-url\"\r\n                      aria-describedby=\"basic-addon3\"\r\n                      onChange={(e) => setPhone(e.target.value)}\r\n                    />\r\n                  </div>\r\n                  {props.loading ? (\r\n                    <span class=\"btn btn-primary\">\r\n                      <Loaders loading={props.loading} />\r\n                    </span>\r\n                  ) : (\r\n                    <button\r\n                      type=\"button\"\r\n                      class=\"btn btn-primary\"\r\n                      onClick={_handleSaveUser}\r\n                    >\r\n                      Save User\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <div className=\"white_box\">\r\n                  <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                      <span className=\"input-group-text\" id=\"basic-addon3\">\r\n                        Email:\r\n                      </span>\r\n                    </div>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"basic-url\"\r\n                      aria-describedby=\"basic-addon3\"\r\n                      onChange={(e) => setMail(e.target.value.toUpperCase())}\r\n                    />\r\n                  </div>\r\n                  <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                      <span className=\"input-group-text\" id=\"basic-addon3\">\r\n                        Password:\r\n                      </span>\r\n                    </div>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"basic-url\"\r\n                      aria-describedby=\"basic-addon3\"\r\n                      type=\"password\"\r\n                      onChange={(e) =>\r\n                        setPassword(e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                      <label\r\n                        className=\"input-group-text\"\r\n                        htmlFor=\"inputGroupSelect01\"\r\n                      >\r\n                        Role\r\n                      </label>\r\n                    </div>\r\n                    <select\r\n                      className=\"custom-select\"\r\n                      id=\"inputGroupSelect01\"\r\n                      onChange={(e) => setRole(e.target.value.toUpperCase())}\r\n                    >\r\n                      <option>Select role.....</option>\r\n                      <option value={\"ADMINISTRATOR\"}>ADMINISTRATOR</option>\r\n                      <option value={\"CLARK\"}>\r\n                        DATA ENTRY CLARCK\r\n                      </option>\r\n                      <option value={\"CEO\"}>CEO</option>\r\n                      <option value={\"ASSETS MANAGER\"}>ASSETS MANAGER</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\loaders\\round.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\details.js",["205","206","207","208","209","210","211","212","213"],"import { useState } from \"react\";\r\nimport Loaders from \"../component/loaders/round\";\r\nimport Notifications from \"../component/notifications\";\r\nimport PageTitle from \"../component/pageTitle\";\r\nimport \"../main.css\";\r\n\r\nexport default function Details(props) {\r\n  const [edit, setEdit] = useState(false);\r\n  const [editL, setEditL] = useState(false);\r\n  const [editM, setEditM] = useState(false);\r\n  const [editP, setEditP] = useState(false);\r\n  const [editR, setEditR] = useState(false);\r\n  const [showNoti, setShownoti] = useState(false);\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [email, setMail] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [role, setRole] = useState(\"\");\r\n\r\n  const user = props.user;\r\n  const loading = props.loading;\r\n  const notify = props.notify;\r\n  const msg = props.message;\r\n  const type = props.type;\r\n\r\n  const _back = () => {\r\n    props.back();\r\n  };\r\n\r\n  const _handdleNoti = (check) => {\r\n    if (check === \"delete\") {\r\n      props.delete(user._id);\r\n    } else {\r\n      setShownoti(false);\r\n      props.changeState();\r\n    }\r\n  };\r\n\r\n  const _handleEdit = async (check) => {\r\n    if (check === \"f\") {\r\n      if (firstName === \"\") {\r\n        props.changeState();\r\n        return false;\r\n      } else {\r\n        const data = {\r\n          id: user._id,\r\n          firstName: firstName,\r\n          lastName: user.LASTNAME,\r\n          email: user.EMAIL,\r\n          phone: user.PHONE,\r\n          role: user.ROLE,\r\n          password: user.PASSWORD,\r\n        };\r\n        props.editUser(data);\r\n      }\r\n    } else if (check === \"l\") {\r\n      if (lastName === \"\") {\r\n        props.changeState();\r\n        return false;\r\n      } else {\r\n        const data = {\r\n          id: user._id,\r\n          firstName: user.FIRSTNAME,\r\n          lastName: lastName,\r\n          email: user.EMAIL,\r\n          phone: user.PHONE,\r\n          role: user.ROLE,\r\n          password: user.PASSWORD,\r\n        };\r\n        props.editUser(data);\r\n      }\r\n    } else if (check === \"e\") {\r\n      if (email === \"\") {\r\n        props.changeState();\r\n        return false;\r\n      } else {\r\n        const data = {\r\n          id: user._id,\r\n          firstName: user.FIRSTNAME,\r\n          lastName: user.LASTNAME,\r\n          email: email,\r\n          phone: user.PHONE,\r\n          role: user.ROLE,\r\n          password: user.PASSWORD,\r\n        };\r\n        props.editUser(data);\r\n      }\r\n    } else if (check === \"p\") {\r\n      if (phone === \"\") {\r\n        props.changeState();\r\n        return false;\r\n      } else {\r\n        const data = {\r\n          id: user._id,\r\n          firstName: user.FIRSTNAME,\r\n          lastName: user.LASTNAME,\r\n          email: user.EMAIL,\r\n          phone: phone,\r\n          role: user.ROLE,\r\n          password: user.PASSWORD,\r\n        };\r\n        props.editUser(data);\r\n      }\r\n    } else if (check === \"r\") {\r\n      if (role === \"\") {\r\n        props.changeState();\r\n        return false;\r\n      } else {\r\n        const data = {\r\n          id: user._id,\r\n          firstName: user.FIRSTNAME,\r\n          lastName: user.LASTNAME,\r\n          email: user.EMAIL,\r\n          phone: user.PHONE,\r\n          role: role,\r\n          password: user.PASSWORD,\r\n        };\r\n        props.editUser(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PageTitle title=\"Users\" subTitle=\"user\" goBack={_back} />\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-12 card_height_100\">\r\n          <div className=\"white_card \">\r\n            <div className=\"white_card_body row\">\r\n              <div className=\"col-md-6\">\r\n                {showNoti || notify ? (\r\n                  <Notifications\r\n                    type={showNoti ? \"warning\" : type}\r\n                    message={showNoti ? \"Are you sure you want to delete\" : msg}\r\n                    onAction={_handdleNoti}\r\n                  />\r\n                ) : (\r\n                  <span></span>\r\n                )}\r\n                <div className=\"white_box\">\r\n                  <div className=\"profile-cart_2\">\r\n                    <div className=\"images\">\r\n                      <i\r\n                        className=\"fas fa-user-alt myimg\"\r\n                        style={{ color: \"GrayText\", fontSize: 100 }}\r\n                      ></i>\r\n                    </div>\r\n                    <h1>\r\n                      <small>{user.FIRSTNAME + \" \" + user.LASTNAME}</small>\r\n                    </h1>\r\n                    <p></p>\r\n                    <div\r\n                      className=\"social-area\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        marginTop: 10,\r\n                      }}\r\n                    >\r\n                      {loading ? (\r\n                        <span class=\"btn btn-outline-primary mb-2\">\r\n                          <Loaders loading={loading} />\r\n                        </span>\r\n                      ) : (\r\n                        <button\r\n                          type=\"button\"\r\n                          class=\"btn btn-outline-primary mb-2\"\r\n                          onClick={() => setShownoti(true)}\r\n                        >\r\n                          <i class=\"fa fa-trash\"></i>\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <div className=\"white_box\">\r\n                  <div className=\"profile-cart_0 p-3\">\r\n                    <div className=\"centered\">\r\n                      <div className=\"input-group mb-3\">\r\n                        {edit ? (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.FIRSTNAME}\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setFirstName(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.FIRSTNAME}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n\r\n                        <div className=\"input-group-append\">\r\n                          {edit ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  props.stopLoading();\r\n                                  setEdit(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleEdit(\"f\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEdit(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"input-group mb-3\">\r\n                        {editL ? (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.LASTNAME}\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setLastName(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.LASTNAME}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n\r\n                        <div className=\"input-group-append\">\r\n                          {editL ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  props.stopLoading();\r\n                                  setEditL(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleEdit(\"l\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEditL(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"input-group mb-3\">\r\n                        {editM ? (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.EMAIL}\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setMail(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.EMAIL}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n                        <div className=\"input-group-append\">\r\n                          {editM ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  props.stopLoading();\r\n                                  setEditM(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleEdit(\"e\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEditM(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"input-group mb-3\">\r\n                        {editP ? (\r\n                          <input\r\n                            type=\"number\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.PHONE}\r\n                            aria-label=\"Recipient's username\"\r\n                            aria-describedby=\"button-addon-group\"\r\n                            onChange={(e) =>\r\n                              setPhone(e.target.value.toUpperCase())\r\n                            }\r\n                          />\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.PHONE}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n                        <div className=\"input-group-append\">\r\n                          {editP ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  props.stopLoading();\r\n                                  setEditP(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleEdit(\"p\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEditP(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"input-group mb-3\">\r\n                        {editR ? (\r\n                          <select\r\n                            className=\"form-control\"\r\n                            onChange={(e) =>\r\n                              setRole(e.target.value.toUpperCase())\r\n                            }\r\n                          >\r\n                            <option>Select role.....</option>\r\n                            <option value={\"ADMINISTRATOR\"}>\r\n                              ADMINISTRATOR\r\n                            </option>\r\n                            <option value={\"CLARK\"}>DATA ENTRY CLARCK</option>\r\n                            <option value={\"CEO\"}>CEO</option>\r\n                            <option value={\"ASSETs MANAGER\"}>\r\n                              ASSETs MANAGER\r\n                            </option>\r\n                          </select>\r\n                        ) : (\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            form\r\n                            aria-checked\r\n                            placeholder={user.ROLE}\r\n                            aria-label=\"Recipient's username\"\r\n                            disabled\r\n                            aria-describedby=\"button-addon-group\"\r\n                          />\r\n                        )}\r\n                        <div className=\"input-group-append\">\r\n                          {editR ? (\r\n                            <span>\r\n                              <button\r\n                                className=\"btn btn-light\"\r\n                                type=\"button\"\r\n                                id=\"button-addon-group\"\r\n                                onClick={() => {\r\n                                  props.stopLoading();\r\n                                  setEditR(false);\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\"></i>\r\n                              </button>\r\n                              {loading ? (\r\n                                <span className=\"btn btn-light\">\r\n                                  <Loaders loading={loading} />\r\n                                </span>\r\n                              ) : (\r\n                                <button\r\n                                  className=\"btn btn-light\"\r\n                                  type=\"button\"\r\n                                  id=\"button-addon-group\"\r\n                                  onClick={() => _handleEdit(\"r\")}\r\n                                >\r\n                                  <i className=\"fa fa-save\"></i>\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ) : (\r\n                            <button\r\n                              className=\"btn btn-light\"\r\n                              type=\"button\"\r\n                              id=\"button-addon-group\"\r\n                              onClick={() => setEditR(true)}\r\n                            >\r\n                              <i className=\"fa fa-edit\"></i>\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\createReport.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\allAssets.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\printReport.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\printQrCode.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\printAsset.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\tables\\table.js",["214"],"import { useState } from \"react\";\r\nimport Loaders from \"../loaders/round\";\r\n\r\nexport default function Table(props) {\r\n  const [del, setDel] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [markall, setMarkall] = useState(false);\r\n  const [ids, setIds] = useState([]);\r\n\r\n  const data = props.data;\r\n  const assets = props.assets;\r\n\r\n  const _handleChange = ({ id, value }) => {\r\n    setDel(true);\r\n    if (value) {\r\n      ids.push(id);\r\n      setIds(ids);\r\n    } else {\r\n      const itemIndex = ids.indexOf(id);\r\n      ids.splice(itemIndex, 1);\r\n      if (ids.length === 0) {\r\n        setDel(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const _handleDel = async () => {\r\n    setLoading(true);\r\n    await props.del(ids);\r\n    setLoading(false);\r\n  };\r\n\r\n  const _handleDelAll = async () => {\r\n    setLoading(true);\r\n    var delIds = [];\r\n    await assets.forEach((item) => {\r\n      delIds.push(item._id);\r\n    });\r\n    await props.del(delIds);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"QA_table mb_30\">\r\n      {/* table-responsive */}\r\n      <table className=\"table lms_table_active \">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Asset Type</th>\r\n            <th scope=\"col\">Serial Number</th>\r\n            <th scope=\"col\">Department</th>\r\n            <th scope=\"col\">Brand</th>\r\n            <th scope=\"col\">Condition</th>\r\n            <th scope=\"col\">Status</th>\r\n            {del ? (\r\n              <th scope=\"col\">\r\n                {loading ? (\r\n                  <Loaders loading={loading} />\r\n                ) : (\r\n                  <span\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <i\r\n                      className=\"fa fa-trash-alt mr-1\"\r\n                      type=\"button\"\r\n                      role=\"button\"\r\n                      onClick={() => _handleDel()}\r\n                    ></i>\r\n                  </span>\r\n                )}\r\n              </th>\r\n            ) : (\r\n              <th></th>\r\n            )}\r\n            {markall ? (\r\n              <th scope=\"col\">\r\n                {loading ? (\r\n                  <Loaders loading={loading} />\r\n                ) : (\r\n                  <span\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <i\r\n                      className=\"fa fa-trash-alt mr-1\"\r\n                      type=\"button\"\r\n                      role=\"button\"\r\n                      style={{ color: \"red\" }}\r\n                      onClick={() => _handleDelAll()}\r\n                    ></i>\r\n                  </span>\r\n                )}\r\n              </th>\r\n            ) : (\r\n              <th></th>\r\n            )}\r\n            <th>\r\n              <span\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  onChange={(e) => {\r\n                    if (e.target.checked) {\r\n                      setMarkall(true);\r\n                    } else {\r\n                      setMarkall(false);\r\n                    }\r\n                  }}\r\n                />\r\n              </span>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.length === 0 ? (\r\n            <tr>No data found</tr>\r\n          ) : (\r\n            data.map((item) => {\r\n              return (\r\n                <tr key={item._id}>\r\n                  <td scope=\"row\">\r\n                    {\" \"}\r\n                    <span\r\n                      type=\"button\"\r\n                      role=\"button\"\r\n                      style={{ color: \"Highlight\" }}\r\n                      className=\"question_content\"\r\n                      onClick={() => props.onClick(item)}\r\n                    >\r\n                      {\" \"}\r\n                      {item.ASSETTYPE}\r\n                    </span>\r\n                  </td>\r\n                  <td>{item.SERIALNUMBER}</td>\r\n                  <td>{item.DEPARTMENT}</td>\r\n                  <td>{item.BRAND}</td>\r\n                  <td>{item.CONDITION}</td>\r\n                  {item.STATUS === \"ACTIVE\" ? (\r\n                    <td>\r\n                      <span className=\"badge badge-pill badge-success\">\r\n                        Active\r\n                      </span>\r\n                    </td>\r\n                  ) : (\r\n                    <td>\r\n                      <span className=\"badge badge-pill badge-danger\">\r\n                        In-Active\r\n                      </span>\r\n                    </td>\r\n                  )}\r\n                  <td>\r\n                    {markall ? (\r\n                      <input type=\"checkbox\" checked={true} />\r\n                    ) : (\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        onChange={(e) =>\r\n                          _handleChange({\r\n                            id: item._id,\r\n                            value: e.target.checked,\r\n                          })\r\n                        }\r\n                      />\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\others\\departDetails.js",["215"],"import React, { useRef, useState } from \"react\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { PrintAllAssets } from \"../funtions/prints/allAssets\";\r\nimport { PrintDepDetails } from \"../funtions/prints/printDepDetails\";\r\n\r\nexport default function DepartDetails(props) {\r\n  const data = props.data;\r\n\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  const secondRef = useRef();\r\n  const handlePrintAll = useReactToPrint({\r\n    content: () => secondRef.current,\r\n  });\r\n\r\n  const _handleActiveAssets = () => {\r\n    var active = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.STATUS === \"ACTIVE\") {\r\n        active += 1;\r\n      }\r\n    });\r\n    return active;\r\n  };\r\n\r\n  const _handleInActiveAssets = () => {\r\n    var inActive = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.STATUS === \"IN-ACTIVE\") {\r\n        inActive += 1;\r\n      }\r\n    });\r\n    return inActive;\r\n  };\r\n\r\n  const _handleNewAssets = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.CONDITION === \"NEW\") {\r\n        res += 1;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleOldAssets = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.CONDITION === \"OLD\") {\r\n        res += 1;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleDamagedAssets = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.CONDITION === \"DAMAGED\") {\r\n        res += 1;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleRepairsAssets = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.CONDITION === \"REPAIRS\") {\r\n        res += 1;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleAssetTypes = () => {\r\n    var res = [];\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (!res.includes(item.ASSETTYPE.split(\"-\")[0])) {\r\n        res.push(item.ASSETTYPE.split(\"-\")[0]);\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleDonated = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.DONATEDORPURCHASED === \"DONATED\") {\r\n        res += 1;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handlePurchased = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      if (item.DONATEDORPURCHASED === \"PURCHASED\") {\r\n        res += 1;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  const _handleAssetsValue = () => {\r\n    var res = 0;\r\n    const assets = data.assets;\r\n    assets.forEach((item) => {\r\n      res = res + parseInt(item.VALUE);\r\n    });\r\n    return res;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PrintDepDetails\r\n        ref={componentRef}\r\n        department={data.department}\r\n        assetCount={data.assetCount}\r\n        active={_handleActiveAssets}\r\n        in_active={_handleInActiveAssets}\r\n        newAss={_handleNewAssets}\r\n        old={_handleOldAssets}\r\n        damaged={_handleDamagedAssets}\r\n        repairs={_handleRepairsAssets}\r\n        types={_handleAssetTypes}\r\n        donated={_handleDonated}\r\n        purchased={_handlePurchased}\r\n        value={_handleAssetsValue}\r\n      />\r\n      <PrintAllAssets\r\n        ref={secondRef}\r\n        assets={data.assets}\r\n        value={_handleAssetsValue}\r\n      />\r\n      <div className=\"row \">\r\n        <div className=\"col-12 QA_section\">\r\n          <div className=\"card QA_table \">\r\n            <div className=\"card-header\">\r\n              Department: <strong>{data.department}</strong>\r\n              <span className=\"float-right\">\r\n                <span\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                >\r\n                  ASSETS REG\r\n                </span>\r\n                <span\r\n                  type=\"button\"\r\n                  role=\"button\"\r\n                  onClick={() => props.onBack()}\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                >\r\n                  <i className=\"fa fa-arrow-left\"></i>\r\n                </span>\r\n                <span\r\n                  type=\"button\"\r\n                  role=\"button\"\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                  onClick={handlePrint}\r\n                >\r\n                  <i title=\"print inventory\" className=\"fa fa-print\"></i>\r\n                </span>\r\n                <span\r\n                  type=\"button\"\r\n                  role=\"button\"\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                  }}\r\n                  onClick={handlePrintAll}\r\n                >\r\n                  <i\r\n                    title=\"print all assets\"\r\n                    className=\"fa fa-angle-double-down\"\r\n                  ></i>\r\n                </span>\r\n              </span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <span className=\"row\" style={{ width: \"100%\", display: \"flex\" }}>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Department Name:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {data.department}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {data.assetCount}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of Active Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleActiveAssets()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of In-Active Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleInActiveAssets()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of New Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleNewAssets()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of Old Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleOldAssets()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of Damaged Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleDamagedAssets()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Number Of Assets At Repairs:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleRepairsAssets()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Number Of Donated Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleDonated()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Number Of Purchased Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handlePurchased()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Total Value Of Assets:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleAssetsValue()}\r\n                </span>\r\n                <span\r\n                  style={{\r\n                    width: \"50%\",\r\n                    paddingLeft: \"70px\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  Types Of Assets In The Department:\r\n                </span>\r\n                <span style={{ width: \"50%\", marginBottom: \"20px\" }}>\r\n                  {_handleAssetTypes().map((item, index) => {\r\n                    return (\r\n                      <span\r\n                        style={{\r\n                          fontSize: 15,\r\n                          fontWeight: \"bold\",\r\n                          marginRight: \"15px\",\r\n                        }}\r\n                        key={index}\r\n                      >\r\n                        {item},\r\n                      </span>\r\n                    );\r\n                  })}\r\n                </span>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\depAssets.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\branchAssets.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\invDetailsPrint.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\component\\tables\\printTables.js",[],"C:\\Users\\Ilyas\\Documents\\projects\\softwares\\master\\assets-rig\\src\\main\\app\\funtions\\prints\\printDepDetails.js",[],{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","severity":1,"message":"221","line":6,"column":8,"nodeType":"222","messageId":"223","endLine":6,"endColumn":20},{"ruleId":"224","severity":1,"message":"225","line":222,"column":52,"nodeType":"226","messageId":"227","endLine":222,"endColumn":54},{"ruleId":"224","severity":1,"message":"225","line":249,"column":52,"nodeType":"226","messageId":"227","endLine":249,"endColumn":54},{"ruleId":"220","severity":1,"message":"228","line":5,"column":8,"nodeType":"222","messageId":"223","endLine":5,"endColumn":17},{"ruleId":"229","severity":1,"message":"230","line":8,"column":6,"nodeType":"231","endLine":8,"endColumn":8,"suggestions":"232"},{"ruleId":"229","severity":1,"message":"233","line":17,"column":6,"nodeType":"231","endLine":17,"endColumn":8,"suggestions":"234"},{"ruleId":"224","severity":1,"message":"235","line":24,"column":24,"nodeType":"226","messageId":"236","endLine":24,"endColumn":26},{"ruleId":"237","severity":1,"message":"238","line":204,"column":29,"nodeType":"239","endLine":209,"endColumn":30},{"ruleId":"237","severity":1,"message":"238","line":228,"column":29,"nodeType":"239","endLine":233,"endColumn":30},{"ruleId":"237","severity":1,"message":"238","line":253,"column":29,"nodeType":"239","endLine":258,"endColumn":30},{"ruleId":"229","severity":1,"message":"240","line":55,"column":6,"nodeType":"231","endLine":55,"endColumn":8,"suggestions":"241"},{"ruleId":"220","severity":1,"message":"242","line":13,"column":18,"nodeType":"222","messageId":"223","endLine":13,"endColumn":27},{"ruleId":"229","severity":1,"message":"233","line":17,"column":6,"nodeType":"231","endLine":17,"endColumn":8,"suggestions":"243"},{"ruleId":"224","severity":1,"message":"235","line":23,"column":24,"nodeType":"226","messageId":"236","endLine":23,"endColumn":26},{"ruleId":"224","severity":1,"message":"235","line":64,"column":24,"nodeType":"226","messageId":"236","endLine":64,"endColumn":26},{"ruleId":"224","severity":1,"message":"235","line":92,"column":24,"nodeType":"226","messageId":"236","endLine":92,"endColumn":26},{"ruleId":"220","severity":1,"message":"244","line":1,"column":25,"nodeType":"222","messageId":"223","endLine":1,"endColumn":33},{"ruleId":"245","severity":1,"message":"246","line":137,"column":23,"nodeType":"247","messageId":"248","endLine":137,"endColumn":38},{"ruleId":"249","severity":1,"message":"250","line":184,"column":27,"nodeType":"239","endLine":195,"endColumn":29},{"ruleId":"249","severity":1,"message":"250","line":197,"column":27,"nodeType":"239","endLine":206,"endColumn":29},{"ruleId":"249","severity":1,"message":"250","line":252,"column":27,"nodeType":"239","endLine":263,"endColumn":29},{"ruleId":"249","severity":1,"message":"250","line":265,"column":27,"nodeType":"239","endLine":274,"endColumn":29},{"ruleId":"249","severity":1,"message":"250","line":320,"column":27,"nodeType":"239","endLine":331,"endColumn":29},{"ruleId":"249","severity":1,"message":"250","line":333,"column":27,"nodeType":"239","endLine":342,"endColumn":29},{"ruleId":"249","severity":1,"message":"250","line":387,"column":27,"nodeType":"239","endLine":398,"endColumn":29},{"ruleId":"249","severity":1,"message":"250","line":400,"column":27,"nodeType":"239","endLine":409,"endColumn":29},{"ruleId":"249","severity":1,"message":"250","line":471,"column":27,"nodeType":"239","endLine":480,"endColumn":29},{"ruleId":"251","severity":1,"message":"252","line":133,"column":23,"nodeType":"247","endLine":133,"endColumn":34},{"ruleId":"220","severity":1,"message":"244","line":1,"column":25,"nodeType":"222","messageId":"223","endLine":1,"endColumn":33},"no-native-reassign",["253"],"no-negated-in-lhs",["254"],"no-unused-vars","'_fetchAssets' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.reduce() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'loginback' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_move'. Either include it or remove the dependency array.","ArrayExpression",["255"],"React Hook useEffect has a missing dependency: 'group'. Either include it or remove the dependency array.",["256"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'paginatedArray'. Either include it or remove the dependency array.",["257"],"'setReport' is assigned a value but never used.",["258"],"'useState' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","jsx-a11y/role-supports-aria-props","The attribute aria-checked is not supported by the role textbox. This role is implicit on the element input.","jsx-a11y/scope","The scope prop can only be used on <th> elements.","no-global-assign","no-unsafe-negation",{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"261","fix":"265"},"Update the dependencies array to be: [_move]",{"range":"266","text":"267"},"Update the dependencies array to be: [group]",{"range":"268","text":"269"},"Update the dependencies array to be: [paginatedArray]",{"range":"270","text":"271"},{"range":"272","text":"269"},[217,219],"[_move]",[549,551],"[group]",[1684,1686],"[paginatedArray]",[566,568]]